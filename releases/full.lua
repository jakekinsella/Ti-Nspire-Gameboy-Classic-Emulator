local stringSub = string.sub
local mathFloor = math.floor
local mathCeil = math.ceil
local mathPow = math.pow
local mathFmod = math.fmod

-- Bitwise functions
-- Functions that start with b return a bit array
-- Functions that do not start with b return an int

function toBits (num, bits)
  eAssert("toBits", num, "num", "number")
  eAssert("toBits", bits, "bits", "number")

  binary = {}
  total = num
  i = 1 

  while i <= bits do
    binary[i] = total % 2
    total = mathFloor(total / 2)
    i = i + 1
  end

  return binary
end

function toInt (bits)
  eAssert("toInt", bits, "bits", "table")

  number = 0
  i = 1 

  while i <= #bits do
    if bits[i] == 1 then
      number = number + mathPow(2, i - 1) -- Go bacwards through array
    end

    i = i + 1
  end
  
  return mathFloor(number)
end

-- Shifts take only ints

function shiftLeft (number, shift)
  eAssert("shiftLeft", number, "number", "number")
  eAssert("shiftLeft", shift, "shift", "number")

  return mathFloor(number * mathPow(2, shift))
end

function shiftRight (number, shift)
  eAssert("shiftRight", number, "number", "number")
  eAssert("shiftRight", shift, "shift", "number")

  return mathFloor(number / mathPow(2, shift))
end

function bBitwiseAnd (bits1, bits2)
  eAssert("bBitwiseAnd", bits1, "bits1", "table")
  eAssert("bBitwiseAnd", bits2, "bits2", "table")

  newBits = {}
  i = 0
  
  while i <= #bits1 do
    if bits1[i] == bits2[i] and bits1[i] ~= 0 and bits2[i] ~= 0 then
      newBits[i] = 1
    else
      newBits[i] = 0
    end
    
    i = i + 1
  end
  
  return newBits
end

function bitwiseAnd (bits1, bits2)
  eAssert("bitwiseAnd", bits1, "bits1", "table")
  eAssert("bitwiseAnd", bits2, "bits2", "table")

  return toInt(bBitwiseAnd(bits1, bits2))
end

function bitwiseAnd_8b (bits1, bits2)
  eAssert("bitwiseAnd_8b", bits1, "bits1", "number")
  eAssert("bitwiseAnd_8b", bits2, "bits2", "number")

  return bitwiseAnd(toBits(bits1, 8), toBits(bits2, 8))
end

function bitwiseAnd_16b (bits1, bits2)
  eAssert("bitwiseAnd_16b", bits1, "bits1", "number")
  eAssert("bitwiseAnd_16b", bits2, "bits2", "number")

  return bitwiseAnd(toBits(bits1, 16), toBits(bits2, 16))
end

function bBitwiseOr (bits1, bits2)
  eAssert("bBitwiseOr", bits1, "bits1", "table")
  eAssert("bBitwiseOr", bits2, "bits2", "table")

  newBits = {}
  i = 0
  
  while i <= #bits1 do
    if bits1[i] == bits2[i] and bits1[i] == 0 and bits2[i] == 0 then
      newBits[i] = 0
    else
      newBits[i] = 1
    end
    
    i = i + 1
  end
  
  return newBits
end

function bitwiseOr (bits1, bits2)
  eAssert("bitwiseOr", bits1, "bits1", "table")
  eAssert("bitwiseOr", bits2, "bits2", "table")

  return toInt(bBitwiseOr(bits1, bits2))
end

function bitwiseOr_8b (bits1, bits2)
  eAssert("bitwiseOr_8b", bits1, "bits1", "number")
  eAssert("bitwiseOr_8b", bits2, "bits2", "number")

  return bitwiseOr(toBits(bits1, 8), toBits(bits2, 8))
end

function bBitwiseXor (bits1, bits2)
  eAssert("bBitwiseXor", bits1, "bits1", "table")
  eAssert("bBitwiseXor", bits2, "bits2", "table")

  newBits = {}
  i = 0
  
  while i <= #bits1 do
    if bits1[i] ~= bits2[i] then
      newBits[i] = 1
    else
      newBits[i] = 0
    end
    
    i = i + 1
  end
  
  return newBits
end

function bitwiseXor (bits1, bits2)
  eAssert("bitwiseXor", bits1, "bits1", "table")
  eAssert("bitwiseXor", bits2, "bits2", "table")

  return toInt(bBitwiseXor(bits1, bits2))
end

function bitwiseXor_8b (bits1, bits2)
  eAssert("bitwiseXor_8b", bits1, "bits1", "number")
  eAssert("bitwiseXor_8b", bits2, "bits2", "number")

  return bitwiseXor(toBits(bits1, 8), toBits(bits2, 8))
end

function bBitwiseNegate (bits)
  eAssert("bBitwiseNegat", bits, "bits", "table")

  newBits = {}
  i = 0
  
  while i <= #bits do
    if bits[i] == 1 then
      newBits[i] = 0
    else
      newBits[i] = 1
    end
    
    i = i + 1
  end
  
  return newBits
end

function bitwiseNegate (bits)
  eAssert("bitwiseNegat", bits, "bits", "table")

  return toInt(bBitwiseNegate(bits))
end

function bitwiseNegate_8b (bits)
  eAssert("bitwiseNegate_8b", bits, "bits", "number")

  return bitwiseAnd(toBits(bits, 8))
end


function u_toHex(num)
  eAssert("u_toHex", num, "num", "number")
  
  local hexstr = '0123456789abcdef'
  local s = ''
  while num > 0 do
    local mod = mathFmod(num, 16)
    s = stringSub(hexstr, mod+1, mod+1) .. s
    num = mathFloor(num / 16)
  end
  if s == '' then s = '0' end
  return s
end

function toHex (num)
  eAssert("toHex", num, "num", "number")

  return "0x" .. u_toHex(num)
end


-- All adresses MUST be converted in the following manner: address + 1
rom = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xd9,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xd9,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xd9,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xd9,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xd9,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0x50,0x01,0xce,0xed,0x66,0x66,0xcc,0x0d,0x00,0x0b,0x03,0x73,0x00,0x83,0x00,0x0c,0x00,0x0d,0x00,0x08,0x11,0x1f,0x88,0x89,0x00,0x0e,0xdc,0xcc,0x6e,0xe6,0xdd,0xdd,0xd9,0x99,0xbb,0xbb,0x67,0x63,0x6e,0x0e,0xec,0xcc,0xdd,0xdc,0x99,0x9f,0xbb,0xb9,0x33,0x3e,0x54,0x49,0x43,0x2d,0x54,0x41,0x43,0x2d,0x54,0x4f,0x45,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xec,0xaa,0xcd,0xf3,0x31,0xf4,0xff,0xcd,0x7c,0x03,0xcd,0xac,0x1a,0x18,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc9,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0x1d,0x22,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7e,0x6f,0x07,0x9f,0x67,0xc9,0x7e,0x23,0x66,0x6f,0xc9,0x7d,0x12,0xc9,0x7d,0x12,0x13,0x7c,0x12,0xc9,0x7d,0xb3,0x6f,0x7c,0xb2,0x67,0xc9,0x7d,0xab,0x6f,0x7c,0xaa,0x67,0xc9,0x7d,0xa3,0x6f,0x7c,0xa2,0x67,0xc9,0xcd,0x6f,0x02,0xc8,0x2b,0xc9,0xcd,0x6f,0x02,0xc0,0x2b,0xc9,0xe5,0xd5,0xe1,0xd1,0xcd,0x6f,0x02,0xd8,0x2b,0xc9,0xcd,0x6f,0x02,0xc8,0xd8,0x2b,0xc9,0xcd,0x6f,0x02,0xd0,0x2b,0xc9,0xcd,0x6f,0x02,0xd8,0x2b,0xc9,0xcd,0x80,0x02,0xd0,0x2b,0xc9,0xcd,0x80,0x02,0xd8,0x2b,0xc9,0xe5,0xd5,0xe1,0xd1,0xcd,0x80,0x02,0xd8,0x2b,0xc9,0xcd,0x80,0x02,0xc8,0xd8,0x2b,0xc9,0x7b,0x95,0x5f,0x7a,0x9c,0x21,0x01,0x00,0xfe,0x80,0x30,0x02,0xb3,0xc9,0xb3,0x37,0xc9,0x7a,0xbc,0x20,0x02,0x7b,0xbd,0x21,0x01,0x00,0xc9,0xe5,0xd5,0xe1,0xd1,0x1d,0x7b,0xfe,0x80,0xd0,0xcb,0x14,0xcb,0x1c,0xcb,0x1d,0x18,0xf3,0xe5,0xd5,0xe1,0xd1,0x1d,0x7b,0xfe,0x80,0xd0,0x29,0x18,0xf8,0x7b,0x95,0x6f,0x7a,0x9c,0x67,0xc9,0xcd,0xb3,0x02,0x23,0xc9,0x7c,0x2f,0x67,0x7d,0x2f,0x6f,0xc9,0x7c,0xb5,0x28,0x04,0x21,0x00,0x00,0xc9,0x23,0xc9,0xcd,0xba,0x02,0xc3,0xba,0x02,0x44,0x4d,0x21,0x00,0x00,0x79,0x0f,0x30,0x01,0x19,0xaf,0xcb,0x18,0xcb,0x19,0x79,0xb0,0xc8,0xaf,0xcb,0x13,0xcb,0x12,0x7a,0xb3,0xc8,0x18,0xe9,0x44,0x4d,0x7a,0xa8,0xfe,0x80,0xf5,0x7a,0xfe,0x80,0xd4,0x34,0x03,0x78,0xfe,0x80,0xd4,0x3c,0x03,0x3e,0x10,0xfe,0x80,0xf5,0xd5,0xe1,0x11,0x00,0x00,0x29,0xcd,0x44,0x03,0x28,0x11,0xcd,0x4b,0x03,0xfe,0x80,0x30,0x0a,0x7d,0xf6,0x01,0x6f,0x7b,0x91,0x5f,0x7a,0x98,0x57,0xf1,0x3d,0x28,0x05,0xfe,0x80,0xf5,0x18,0xe0,0xf1,0xd8,0xcd,0x34,0x03,0xe5,0xd5,0xe1,0xd1,0xcd,0x34,0x03,0xe5,0xd5,0xe1,0xd1,0xc9,0x7a,0x2f,0x57,0x7b,0x2f,0x5f,0x13,0xc9,0x78,0x2f,0x47,0x79,0x2f,0x4f,0x03,0xc9,0xcb,0x13,0xcb,0x12,0x7a,0xb3,0xc9,0x7b,0x91,0x7a,0x98,0xc9,0xe5,0xd1,0xe1,0xcd,0x75,0x03,0x7b,0xb9,0x20,0x0b,0x7a,0xb8,0x20,0x07,0xcd,0x75,0x03,0x28,0x07,0xc5,0xc9,0xcd,0x75,0x03,0x20,0xe9,0x2b,0x2b,0x2b,0x56,0x2b,0x5e,0xe5,0xd5,0xe1,0xd1,0xe9,0x4e,0x23,0x46,0x23,0x79,0xb0,0xc9,0x3e,0x00,0xe0,0xff,0xea,0x00,0xc0,0x97,0xe0,0x41,0xe0,0x42,0xe0,0x43,0x3e,0x80,0xe0,0x40,0xc9,0x7d,0xea,0x00,0xc0,0x01,0x80,0x01,0xcb,0x05,0xcb,0x05,0x09,0xe9,0xf5,0xc5,0x06,0xff,0xcd,0xac,0x03,0xb7,0x20,0xf8,0x05,0x20,0xf7,0xc1,0xf1,0xc9,0xc5,0x3e,0x20,0xea,0x00,0xff,0xfa,0x00,0xff,0xfa,0x00,0xff,0x2f,0xe6,0x0f,0xcb,0x37,0x47,0x3e,0x10,0xea,0x00,0xff,0xfa,0x00,0xff,0xfa,0x00,0xff,0xfa,0x00,0xff,0xfa,0x00,0xff,0xfa,0x00,0xff,0xfa,0x00,0xff,0x2f,0xe6,0x0f,0xb0,0xcb,0x37,0xc1,0xc9,0xcd,0xac,0x03,0xa0,0x28,0xfa,0xc9,0xf0,0x40,0x87,0xd0,0xf0,0x44,0xfe,0x90,0x20,0xfa,0xc9,0x0b,0x78,0xb1,0x20,0xfb,0xc9,0xd5,0x11,0x00,0x00,0x1b,0x7a,0xb3,0x20,0xfb,0x0b,0x78,0xb1,0x20,0xf6,0xd1,0xc9,0x3e,0x00,0xe0,0x47,0xc9,0x3e,0xff,0xe0,0x47,0xc9,0x3e,0xe4,0xe0,0x47,0xe0,0x48,0xe0,0x49,0xc9,0x21,0x00,0x80,0x11,0x00,0x02,0x78,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x1b,0x7a,0xb3,0x20,0xf2,0xc9,0xf0,0x41,0xe6,0x02,0x20,0xfa,0x0a,0x22,0x03,0x1b,0x7a,0xb3,0x20,0xf2,0xc9,0x21,0x00,0x98,0x18,0x03,0x21,0x00,0x9c,0x11,0x00,0x04,0xf0,0x41,0xe6,0x02,0x20,0xfa,0x0a,0x22,0x03,0x1b,0x7a,0xb3,0x20,0xf2,0xc9,0x21,0x00,0x98,0x18,0x03,0x21,0x00,0x9c,0x11,0x00,0x04,0xf0,0x41,0xe6,0x02,0x20,0xfa,0x78,0x22,0x1b,0x7a,0xb3,0x20,0xf3,0xc9,0xe5,0x21,0x00,0x98,0x18,0x04,0xe5,0x21,0x00,0x9c,0xc5,0x3e,0x00,0xb3,0x28,0x07,0x01,0x20,0x00,0x09,0x1d,0x20,0xfc,0x06,0x00,0x4a,0x09,0xc1,0xd1,0xe5,0xd5,0xf0,0x41,0xe6,0x02,0x20,0xfa,0x0a,0x22,0x03,0x15,0x20,0xf4,0xe1,0x54,0xe1,0x1d,0x28,0x0a,0xc5,0x01,0x20,0x00,0x09,0xc1,0xe5,0xd5,0x18,0xe4,0xc9,0x21,0x00,0xfe,0xcb,0x01,0xcb,0x01,0x06,0x00,0x09,0xf0,0x41,0xe6,0x02,0x20,0xfa,0x7b,0x22,0xf0,0x41,0xe6,0x02,0x20,0xfa,0x7a,0x22,0xc9,0x21,0x00,0xfe,0xcb,0x01,0xcb,0x01,0x06,0x00,0x09,0x23,0x23,0xf0,0x41,0xe6,0x02,0x20,0xfa,0x7a,0x77,0xc9,0x21,0x00,0xfe,0xcb,0x01,0xcb,0x01,0x06,0x00,0x09,0x23,0x23,0x23,0xf0,0x41,0xe6,0x02,0x20,0xfa,0x7a,0x77,0xc9,0xe8,0xfe,0x21,0x00,0x00,0x39,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x0e,0x02,0x21,0x00,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x09,0x00,0xd1,0xcd,0x4c,0x02,0x7c,0xb5,0xc2,0x27,0x05,0xc3,0x43,0x05,0x21,0x00,0x00,0x39,0xe5,0xcd,0x06,0x02,0x23,0xd1,0xcd,0x0e,0x02,0x2b,0xc3,0xff,0x04,0x21,0x04,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0xd1,0x19,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x0b,0x02,0xc3,0x16,0x05,0xe8,0x02,0xc9,0xe8,0xff,0x21,0x00,0x00,0x39,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x0b,0x02,0x21,0x00,0x00,0x39,0xcd,0x00,0x02,0xe5,0x21,0x09,0x00,0xd1,0xcd,0x4c,0x02,0x7c,0xb5,0xc2,0x80,0x05,0xc3,0x29,0x06,0x21,0x00,0x00,0x39,0xe5,0xcd,0x00,0x02,0xe5,0x21,0x03,0x00,0xd1,0x19,0xd1,0xcd,0x0b,0x02,0xc3,0x54,0x05,0x21,0x03,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x02,0x00,0x39,0xcd,0x00,0x02,0xd1,0x19,0xcd,0x00,0x02,0x7c,0xb5,0xca,0xcc,0x05,0x21,0x03,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x02,0x00,0x39,0xcd,0x00,0x02,0xd1,0x19,0xcd,0x00,0x02,0xe5,0x21,0x05,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x04,0x00,0x39,0xcd,0x00,0x02,0xe5,0x21,0x01,0x00,0xd1,0x19,0xd1,0x19,0xcd,0x00,0x02,0xd1,0xcd,0x29,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xca,0x07,0x06,0x21,0x03,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x02,0x00,0x39,0xcd,0x00,0x02,0xd1,0x19,0xcd,0x00,0x02,0xe5,0x21,0x05,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x04,0x00,0x39,0xcd,0x00,0x02,0xe5,0x21,0x02,0x00,0xd1,0x19,0xd1,0x19,0xcd,0x00,0x02,0xd1,0xcd,0x29,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xca,0x26,0x06,0x21,0x03,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x02,0x00,0x39,0xcd,0x00,0x02,0xd1,0x19,0xcd,0x00,0x02,0xc3,0x10,0x08,0xc3,0x6b,0x05,0x21,0x00,0x00,0x39,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x0b,0x02,0x21,0x00,0x00,0x39,0xcd,0x00,0x02,0xe5,0x21,0x03,0x00,0xd1,0xcd,0x4c,0x02,0x7c,0xb5,0xc2,0x5d,0x06,0xc3,0x06,0x07,0x21,0x00,0x00,0x39,0xe5,0xcd,0x00,0x02,0x23,0xd1,0xcd,0x0b,0x02,0x2b,0xc3,0x35,0x06,0x21,0x03,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x02,0x00,0x39,0xcd,0x00,0x02,0xd1,0x19,0xcd,0x00,0x02,0x7c,0xb5,0xca,0xa9,0x06,0x21,0x03,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x02,0x00,0x39,0xcd,0x00,0x02,0xd1,0x19,0xcd,0x00,0x02,0xe5,0x21,0x05,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x04,0x00,0x39,0xcd,0x00,0x02,0xe5,0x21,0x03,0x00,0xd1,0x19,0xd1,0x19,0xcd,0x00,0x02,0xd1,0xcd,0x29,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xca,0xe4,0x06,0x21,0x03,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x02,0x00,0x39,0xcd,0x00,0x02,0xd1,0x19,0xcd,0x00,0x02,0xe5,0x21,0x05,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x04,0x00,0x39,0xcd,0x00,0x02,0xe5,0x21,0x06,0x00,0xd1,0x19,0xd1,0x19,0xcd,0x00,0x02,0xd1,0xcd,0x29,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xca,0x03,0x07,0x21,0x03,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x02,0x00,0x39,0xcd,0x00,0x02,0xd1,0x19,0xcd,0x00,0x02,0xc3,0x10,0x08,0xc3,0x4c,0x06,0x21,0x03,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x00,0x00,0xd1,0x19,0xcd,0x00,0x02,0x7c,0xb5,0xca,0x40,0x07,0x21,0x03,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x00,0x00,0xd1,0x19,0xcd,0x00,0x02,0xe5,0x21,0x05,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x04,0x00,0xd1,0x19,0xcd,0x00,0x02,0xd1,0xcd,0x29,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xca,0x6d,0x07,0x21,0x03,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x00,0x00,0xd1,0x19,0xcd,0x00,0x02,0xe5,0x21,0x05,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x08,0x00,0xd1,0x19,0xcd,0x00,0x02,0xd1,0xcd,0x29,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xca,0x88,0x07,0x21,0x03,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x04,0x00,0xd1,0x19,0xcd,0x00,0x02,0xc3,0x10,0x08,0x21,0x03,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x02,0x00,0xd1,0x19,0xcd,0x00,0x02,0x7c,0xb5,0xca,0xc2,0x07,0x21,0x03,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x02,0x00,0xd1,0x19,0xcd,0x00,0x02,0xe5,0x21,0x05,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x04,0x00,0xd1,0x19,0xcd,0x00,0x02,0xd1,0xcd,0x29,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xca,0xef,0x07,0x21,0x03,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x02,0x00,0xd1,0x19,0xcd,0x00,0x02,0xe5,0x21,0x05,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x06,0x00,0xd1,0x19,0xcd,0x00,0x02,0xd1,0xcd,0x29,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xca,0x0a,0x08,0x21,0x03,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x04,0x00,0xd1,0x19,0xcd,0x00,0x02,0xc3,0x10,0x08,0x21,0x00,0x00,0xc3,0x10,0x08,0xe8,0x01,0xc9,0xe8,0xff,0x21,0x00,0x00,0x39,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x0b,0x02,0x21,0x00,0x00,0x39,0xcd,0x00,0x02,0xe5,0x21,0x09,0x00,0xd1,0xcd,0x4c,0x02,0x7c,0xb5,0xc2,0x49,0x08,0xc3,0x6e,0x08,0x21,0x00,0x00,0x39,0xe5,0xcd,0x00,0x02,0x23,0xd1,0xcd,0x0b,0x02,0x2b,0xc3,0x21,0x08,0x21,0x03,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x02,0x00,0x39,0xcd,0x00,0x02,0xd1,0x19,0xcd,0x00,0x02,0xcd,0xba,0x02,0x7c,0xb5,0xca,0x6b,0x08,0x21,0x00,0x00,0xc3,0x74,0x08,0xc3,0x38,0x08,0x21,0x01,0x00,0xc3,0x74,0x08,0xe8,0x01,0xc9,0xe8,0xff,0x21,0x00,0x00,0x39,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x0b,0x02,0x21,0x00,0x00,0x39,0xcd,0x00,0x02,0xe5,0x21,0x09,0x00,0xd1,0xcd,0x4c,0x02,0x7c,0xb5,0xc2,0xad,0x08,0xc3,0x25,0x09,0x21,0x00,0x00,0x39,0xe5,0xcd,0x00,0x02,0x23,0xd1,0xcd,0x0b,0x02,0x2b,0xc3,0x85,0x08,0x21,0x05,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x02,0x00,0x39,0xcd,0x00,0x02,0xd1,0x19,0xcd,0x00,0x02,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x29,0x02,0x7c,0xb5,0xca,0x22,0x09,0x21,0x05,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x02,0x00,0x39,0xcd,0x00,0x02,0xd1,0x19,0xe5,0x21,0x05,0x00,0x39,0xcd,0x00,0x02,0xd1,0xcd,0x0b,0x02,0x21,0x05,0x00,0x39,0xcd,0x06,0x02,0xe5,0x3e,0x01,0xcd,0x46,0x05,0xe8,0x02,0x7c,0xb5,0xca,0x09,0x09,0x21,0x00,0x00,0x39,0xcd,0x00,0x02,0xc3,0x2b,0x09,0x21,0x05,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x02,0x00,0x39,0xcd,0x00,0x02,0xd1,0x19,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x0b,0x02,0xc3,0x9c,0x08,0x21,0x63,0x00,0xc3,0x2b,0x09,0xe8,0x01,0xc9,0xe8,0xff,0x21,0x00,0x00,0x39,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x0b,0x02,0x21,0x00,0x00,0x39,0xcd,0x00,0x02,0xe5,0x21,0x09,0x00,0xd1,0xcd,0x4c,0x02,0x7c,0xb5,0xc2,0x64,0x09,0xc3,0xfc,0x09,0x21,0x00,0x00,0x39,0xe5,0xcd,0x00,0x02,0x23,0xd1,0xcd,0x0b,0x02,0x2b,0xc3,0x3c,0x09,0x21,0x05,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x02,0x00,0x39,0xcd,0x00,0x02,0xd1,0x19,0xcd,0x00,0x02,0xcd,0xba,0x02,0x7c,0xb5,0xca,0xf9,0x09,0x21,0x05,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x02,0x00,0x39,0xcd,0x00,0x02,0xd1,0x19,0xe5,0x21,0x05,0x00,0x39,0xcd,0x00,0x02,0xe5,0x21,0x03,0x00,0xd1,0xcd,0x1b,0x02,0xd1,0xcd,0x0b,0x02,0x21,0x05,0x00,0x39,0xcd,0x06,0x02,0xe5,0x3e,0x01,0xcd,0x46,0x05,0xe8,0x02,0x7c,0xb5,0xca,0xe0,0x09,0x21,0x05,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x02,0x00,0x39,0xcd,0x00,0x02,0xd1,0x19,0xe5,0x21,0x05,0x00,0x39,0xcd,0x00,0x02,0xd1,0xcd,0x0b,0x02,0x21,0x00,0x00,0x39,0xcd,0x00,0x02,0xc3,0x02,0x0a,0x21,0x05,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x02,0x00,0x39,0xcd,0x00,0x02,0xd1,0x19,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x0b,0x02,0xc3,0x53,0x09,0x21,0x63,0x00,0xc3,0x02,0x0a,0xe8,0x01,0xc9,0xe8,0xff,0xe8,0xff,0xe8,0xff,0x21,0x02,0x00,0x39,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x0b,0x02,0x21,0x02,0x00,0x39,0xcd,0x00,0x02,0xe5,0x21,0x09,0x00,0xd1,0xcd,0x4c,0x02,0x7c,0xb5,0xc2,0x3f,0x0a,0xc3,0x8b,0x0b,0x21,0x02,0x00,0x39,0xe5,0xcd,0x00,0x02,0x23,0xd1,0xcd,0x0b,0x02,0x2b,0xc3,0x17,0x0a,0x21,0x07,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x04,0x00,0x39,0xcd,0x00,0x02,0xd1,0x19,0xcd,0x00,0x02,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x29,0x02,0x7c,0xb5,0xca,0x88,0x0b,0x21,0x00,0x00,0x39,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x0b,0x02,0x21,0x07,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x04,0x00,0x39,0xcd,0x00,0x02,0xd1,0x19,0xe5,0x21,0x07,0x00,0x39,0xcd,0x00,0x02,0xd1,0xcd,0x0b,0x02,0x21,0x01,0x00,0x39,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x0b,0x02,0x21,0x01,0x00,0x39,0xcd,0x00,0x02,0xe5,0x21,0x09,0x00,0xd1,0xcd,0x4c,0x02,0x7c,0xb5,0xc2,0xbd,0x0a,0xc3,0x39,0x0b,0x21,0x01,0x00,0x39,0xe5,0xcd,0x00,0x02,0x23,0xd1,0xcd,0x0b,0x02,0x2b,0xc3,0x95,0x0a,0x21,0x07,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x03,0x00,0x39,0xcd,0x00,0x02,0xd1,0x19,0xcd,0x00,0x02,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x29,0x02,0x7c,0xb5,0xca,0x36,0x0b,0x21,0x07,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x03,0x00,0x39,0xcd,0x00,0x02,0xd1,0x19,0xe5,0x21,0x07,0x00,0x39,0xcd,0x00,0x02,0xd1,0xcd,0x0b,0x02,0x21,0x07,0x00,0x39,0xcd,0x06,0x02,0xe5,0x3e,0x01,0xcd,0x46,0x05,0xe8,0x02,0x7c,0xb5,0xca,0x1d,0x0b,0x21,0x00,0x00,0x39,0xe5,0xcd,0x00,0x02,0x23,0xd1,0xcd,0x0b,0x02,0x2b,0x21,0x07,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x03,0x00,0x39,0xcd,0x00,0x02,0xd1,0x19,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x0b,0x02,0xc3,0xac,0x0a,0x21,0x00,0x00,0x39,0xcd,0x00,0x02,0xe5,0x21,0x01,0x00,0xd1,0xcd,0x35,0x02,0x7c,0xb5,0xca,0x6f,0x0b,0x21,0x05,0x00,0x39,0xe5,0x21,0x07,0x00,0x39,0xcd,0x00,0x02,0xe5,0x21,0x03,0x00,0xd1,0xcd,0x1b,0x02,0xd1,0xcd,0x0b,0x02,0x21,0x02,0x00,0x39,0xcd,0x00,0x02,0xc3,0x91,0x0b,0x21,0x07,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x04,0x00,0x39,0xcd,0x00,0x02,0xd1,0x19,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x0b,0x02,0xc3,0x2e,0x0a,0x21,0x63,0x00,0xc3,0x91,0x0b,0xe8,0x03,0xc9,0xe8,0xff,0xe8,0xfe,0x21,0x02,0x00,0x39,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x0b,0x02,0x21,0x00,0x00,0x39,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x0e,0x02,0x21,0x00,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x09,0x00,0xd1,0xcd,0x4c,0x02,0x7c,0xb5,0xc2,0xd8,0x0b,0xc3,0x02,0x0c,0x21,0x00,0x00,0x39,0xe5,0xcd,0x06,0x02,0x23,0xd1,0xcd,0x0e,0x02,0x2b,0xc3,0xb0,0x0b,0x21,0x05,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0xd1,0x19,0xcd,0x00,0x02,0x7c,0xb5,0xca,0xff,0x0b,0x21,0x02,0x00,0x39,0xe5,0xcd,0x00,0x02,0x23,0xd1,0xcd,0x0b,0x02,0x2b,0xc3,0xc7,0x0b,0x21,0x02,0x00,0x39,0xcd,0x00,0x02,0xc3,0x0c,0x0c,0xe8,0x03,0xc9,0xe8,0xff,0xe8,0xff,0xe8,0xff,0x21,0x00,0x00,0x39,0xe5,0x21,0x0b,0x00,0x39,0xcd,0x06,0x02,0xe5,0x3e,0x01,0xcd,0x94,0x0b,0xe8,0x02,0xd1,0xcd,0x0b,0x02,0x21,0x00,0x00,0x39,0xcd,0x00,0x02,0xcd,0xba,0x02,0x7c,0xb5,0xca,0xfc,0x0c,0x21,0x02,0x00,0x39,0xe5,0x21,0x07,0x00,0x39,0xcd,0x00,0x02,0xe5,0x21,0x03,0x00,0xd1,0xcd,0x22,0x02,0xd1,0xcd,0x0b,0x02,0x21,0x02,0x00,0x39,0xcd,0x00,0x02,0xe5,0x21,0x01,0x00,0xd1,0xcd,0x29,0x02,0x7c,0xb5,0xca,0x77,0x0c,0x21,0x02,0x00,0x39,0xe5,0x21,0x02,0x00,0xd1,0xcd,0x0b,0x02,0xc3,0xba,0x0c,0x21,0x02,0x00,0x39,0xcd,0x00,0x02,0xe5,0x21,0x02,0x00,0xd1,0xcd,0x29,0x02,0x7c,0xb5,0xca,0x9a,0x0c,0x21,0x02,0x00,0x39,0xe5,0x21,0x06,0x00,0xd1,0xcd,0x0b,0x02,0xc3,0xba,0x0c,0x21,0x02,0x00,0x39,0xcd,0x00,0x02,0xe5,0x21,0x03,0x00,0xd1,0xcd,0x29,0x02,0x7c,0xb5,0xca,0xba,0x0c,0x21,0x02,0x00,0x39,0xe5,0x21,0x08,0x00,0xd1,0xcd,0x0b,0x02,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x04,0x00,0x39,0xcd,0x00,0x02,0xd1,0x19,0xe5,0x21,0x09,0x00,0x39,0xcd,0x00,0x02,0xd1,0xcd,0x0b,0x02,0x21,0x07,0x00,0x39,0xe5,0x21,0x09,0x00,0x39,0xcd,0x00,0x02,0xe5,0x21,0x03,0x00,0xd1,0xcd,0x1b,0x02,0xd1,0xcd,0x0b,0x02,0x21,0x02,0x00,0x39,0xcd,0x00,0x02,0xc3,0x44,0x15,0xc3,0x3e,0x15,0x21,0x00,0x00,0x39,0xcd,0x00,0x02,0xe5,0x21,0x02,0x00,0xd1,0xcd,0x29,0x02,0x7c,0xb5,0xca,0x9a,0x11,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x00,0x00,0xd1,0x19,0xcd,0x00,0x02,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x2f,0x02,0x7c,0xb5,0xca,0x45,0x0d,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x08,0x00,0xd1,0x19,0xcd,0x00,0x02,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x2f,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xc2,0x85,0x0d,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x02,0x00,0xd1,0x19,0xcd,0x00,0x02,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x2f,0x02,0x7c,0xb5,0xca,0x82,0x0d,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x06,0x00,0xd1,0x19,0xcd,0x00,0x02,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x2f,0x02,0xcd,0xc4,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xca,0x13,0x0e,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x00,0x00,0xd1,0x19,0xcd,0x00,0x02,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x29,0x02,0x7c,0xb5,0xca,0xcf,0x0d,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x04,0x00,0x39,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x0b,0x02,0xd1,0x19,0xe5,0x21,0x09,0x00,0x39,0xcd,0x00,0x02,0xd1,0xcd,0x0b,0x02,0xc3,0xf1,0x0d,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x04,0x00,0x39,0xe5,0x21,0x02,0x00,0xd1,0xcd,0x0b,0x02,0xd1,0x19,0xe5,0x21,0x09,0x00,0x39,0xcd,0x00,0x02,0xd1,0xcd,0x0b,0x02,0x21,0x07,0x00,0x39,0xe5,0x21,0x09,0x00,0x39,0xcd,0x00,0x02,0xe5,0x21,0x03,0x00,0xd1,0xcd,0x1b,0x02,0xd1,0xcd,0x0b,0x02,0x21,0x02,0x00,0x39,0xcd,0x00,0x02,0xc3,0x44,0x15,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x04,0x00,0xd1,0x19,0xcd,0x00,0x02,0xe5,0x21,0x02,0x00,0xd1,0xcd,0x29,0x02,0x7c,0xb5,0xca,0xa8,0x0e,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x00,0x00,0xd1,0x19,0xcd,0x00,0x02,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x2f,0x02,0x7c,0xb5,0xc2,0x65,0x0e,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x08,0x00,0xd1,0x19,0xcd,0x00,0x02,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x2f,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xc2,0x85,0x0e,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x02,0x00,0xd1,0x19,0xcd,0x00,0x02,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x2f,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xc2,0xa5,0x0e,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x06,0x00,0xd1,0x19,0xcd,0x00,0x02,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x2f,0x02,0xcd,0xc4,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xca,0xc7,0x0f,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x00,0x00,0xd1,0x19,0xcd,0x00,0x02,0xe5,0x21,0x01,0x00,0xd1,0xcd,0x29,0x02,0x7c,0xb5,0xca,0xee,0x0e,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x04,0x00,0x39,0xe5,0x21,0x08,0x00,0xd1,0xcd,0x0b,0x02,0xd1,0x19,0xe5,0x21,0x01,0x00,0xd1,0xcd,0x0b,0x02,0xc3,0xa5,0x0f,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x02,0x00,0xd1,0x19,0xcd,0x00,0x02,0xe5,0x21,0x01,0x00,0xd1,0xcd,0x29,0x02,0x7c,0xb5,0xca,0x2c,0x0f,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x04,0x00,0x39,0xe5,0x21,0x06,0x00,0xd1,0xcd,0x0b,0x02,0xd1,0x19,0xe5,0x21,0x01,0x00,0xd1,0xcd,0x0b,0x02,0xc3,0xa5,0x0f,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x06,0x00,0xd1,0x19,0xcd,0x00,0x02,0xe5,0x21,0x01,0x00,0xd1,0xcd,0x29,0x02,0x7c,0xb5,0xca,0x6a,0x0f,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x04,0x00,0x39,0xe5,0x21,0x02,0x00,0xd1,0xcd,0x0b,0x02,0xd1,0x19,0xe5,0x21,0x01,0x00,0xd1,0xcd,0x0b,0x02,0xc3,0xa5,0x0f,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x08,0x00,0xd1,0x19,0xcd,0x00,0x02,0xe5,0x21,0x01,0x00,0xd1,0xcd,0x29,0x02,0x7c,0xb5,0xca,0xa5,0x0f,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x04,0x00,0x39,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x0b,0x02,0xd1,0x19,0xe5,0x21,0x01,0x00,0xd1,0xcd,0x0b,0x02,0x21,0x07,0x00,0x39,0xe5,0x21,0x09,0x00,0x39,0xcd,0x00,0x02,0xe5,0x21,0x03,0x00,0xd1,0xcd,0x1b,0x02,0xd1,0xcd,0x0b,0x02,0x21,0x02,0x00,0x39,0xcd,0x00,0x02,0xc3,0x44,0x15,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x00,0x00,0xd1,0x19,0xcd,0x00,0x02,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x2f,0x02,0x7c,0xb5,0xca,0xfc,0x0f,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x02,0x00,0xd1,0x19,0xcd,0x00,0x02,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x2f,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xca,0x3b,0x10,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x06,0x00,0xd1,0x19,0xe5,0x21,0x09,0x00,0x39,0xcd,0x00,0x02,0xd1,0xcd,0x0b,0x02,0x21,0x07,0x00,0x39,0xe5,0x21,0x09,0x00,0x39,0xcd,0x00,0x02,0xe5,0x21,0x03,0x00,0xd1,0xcd,0x1b,0x02,0xd1,0xcd,0x0b,0x02,0x21,0x06,0x00,0xc3,0x44,0x15,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x08,0x00,0xd1,0x19,0xcd,0x00,0x02,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x2f,0x02,0x7c,0xb5,0xca,0x70,0x10,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x02,0x00,0xd1,0x19,0xcd,0x00,0x02,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x2f,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xca,0xaf,0x10,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x00,0x00,0xd1,0x19,0xe5,0x21,0x09,0x00,0x39,0xcd,0x00,0x02,0xd1,0xcd,0x0b,0x02,0x21,0x07,0x00,0x39,0xe5,0x21,0x09,0x00,0x39,0xcd,0x00,0x02,0xe5,0x21,0x03,0x00,0xd1,0xcd,0x1b,0x02,0xd1,0xcd,0x0b,0x02,0x21,0x00,0x00,0xc3,0x44,0x15,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x08,0x00,0xd1,0x19,0xcd,0x00,0x02,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x2f,0x02,0x7c,0xb5,0xca,0xe4,0x10,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x06,0x00,0xd1,0x19,0xcd,0x00,0x02,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x2f,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xca,0x23,0x11,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x00,0x00,0xd1,0x19,0xe5,0x21,0x09,0x00,0x39,0xcd,0x00,0x02,0xd1,0xcd,0x0b,0x02,0x21,0x07,0x00,0x39,0xe5,0x21,0x09,0x00,0x39,0xcd,0x00,0x02,0xe5,0x21,0x03,0x00,0xd1,0xcd,0x1b,0x02,0xd1,0xcd,0x0b,0x02,0x21,0x00,0x00,0xc3,0x44,0x15,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x00,0x00,0xd1,0x19,0xcd,0x00,0x02,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x2f,0x02,0x7c,0xb5,0xca,0x58,0x11,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x06,0x00,0xd1,0x19,0xcd,0x00,0x02,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x2f,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xca,0x97,0x11,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x08,0x00,0xd1,0x19,0xe5,0x21,0x09,0x00,0x39,0xcd,0x00,0x02,0xd1,0xcd,0x0b,0x02,0x21,0x07,0x00,0x39,0xe5,0x21,0x09,0x00,0x39,0xcd,0x00,0x02,0xe5,0x21,0x03,0x00,0xd1,0xcd,0x1b,0x02,0xd1,0xcd,0x0b,0x02,0x21,0x08,0x00,0xc3,0x44,0x15,0xc3,0x3e,0x15,0x21,0x00,0x00,0x39,0xcd,0x00,0x02,0xe5,0x21,0x03,0x00,0xd1,0xcd,0x29,0x02,0x7c,0xb5,0xca,0x3e,0x15,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x04,0x00,0xd1,0x19,0xcd,0x00,0x02,0xe5,0x21,0x02,0x00,0xd1,0xcd,0x29,0x02,0x7c,0xb5,0xca,0xf3,0x11,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x00,0x00,0xd1,0x19,0xcd,0x00,0x02,0x7c,0xb5,0xca,0xf0,0x11,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x08,0x00,0xd1,0x19,0xcd,0x00,0x02,0xcd,0xc4,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xc2,0x23,0x12,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x02,0x00,0xd1,0x19,0xcd,0x00,0x02,0x7c,0xb5,0xca,0x20,0x12,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x06,0x00,0xd1,0x19,0xcd,0x00,0x02,0xcd,0xc4,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xca,0xde,0x12,0x21,0x02,0x00,0x39,0xe5,0x21,0x07,0x00,0x39,0xcd,0x00,0x02,0xe5,0x21,0x03,0x00,0xd1,0xcd,0x22,0x02,0xd1,0xcd,0x0b,0x02,0x21,0x02,0x00,0x39,0xe5,0xcd,0x00,0x02,0x23,0xd1,0xcd,0x0b,0x02,0x2b,0x21,0x02,0x00,0x39,0xcd,0x00,0x02,0xe5,0x21,0x02,0x00,0xd1,0xcd,0x29,0x02,0x7c,0xb5,0xca,0x74,0x12,0x21,0x02,0x00,0x39,0xe5,0x21,0x03,0x00,0xd1,0xcd,0x0b,0x02,0xc3,0xb7,0x12,0x21,0x02,0x00,0x39,0xcd,0x00,0x02,0xe5,0x21,0x03,0x00,0xd1,0xcd,0x29,0x02,0x7c,0xb5,0xca,0x97,0x12,0x21,0x02,0x00,0x39,0xe5,0x21,0x05,0x00,0xd1,0xcd,0x0b,0x02,0xc3,0xb7,0x12,0x21,0x02,0x00,0x39,0xcd,0x00,0x02,0xe5,0x21,0x04,0x00,0xd1,0xcd,0x29,0x02,0x7c,0xb5,0xca,0xb7,0x12,0x21,0x02,0x00,0x39,0xe5,0x21,0x07,0x00,0xd1,0xcd,0x0b,0x02,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x04,0x00,0x39,0xcd,0x00,0x02,0xd1,0x19,0xe5,0x21,0x09,0x00,0x39,0xcd,0x00,0x02,0xd1,0xcd,0x0b,0x02,0x21,0x02,0x00,0x39,0xcd,0x00,0x02,0xc3,0x44,0x15,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x00,0x00,0xd1,0x19,0xcd,0x00,0x02,0x7c,0xb5,0xca,0x03,0x13,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x07,0x00,0xd1,0x19,0xcd,0x00,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xca,0x2a,0x13,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x06,0x00,0xd1,0x19,0xe5,0x21,0x09,0x00,0x39,0xcd,0x00,0x02,0xd1,0xcd,0x0b,0x02,0x21,0x06,0x00,0xc3,0x44,0x15,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x00,0x00,0xd1,0x19,0xcd,0x00,0x02,0x7c,0xb5,0xca,0x4f,0x13,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x05,0x00,0xd1,0x19,0xcd,0x00,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xca,0x76,0x13,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x02,0x00,0xd1,0x19,0xe5,0x21,0x09,0x00,0x39,0xcd,0x00,0x02,0xd1,0xcd,0x0b,0x02,0x21,0x02,0x00,0xc3,0x44,0x15,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x02,0x00,0xd1,0x19,0xcd,0x00,0x02,0x7c,0xb5,0xca,0x9b,0x13,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x03,0x00,0xd1,0x19,0xcd,0x00,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xca,0xc2,0x13,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x00,0x00,0xd1,0x19,0xe5,0x21,0x09,0x00,0x39,0xcd,0x00,0x02,0xd1,0xcd,0x0b,0x02,0x21,0x00,0x00,0xc3,0x44,0x15,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x02,0x00,0xd1,0x19,0xcd,0x00,0x02,0x7c,0xb5,0xca,0xe7,0x13,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x07,0x00,0xd1,0x19,0xcd,0x00,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xca,0x0e,0x14,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x08,0x00,0xd1,0x19,0xe5,0x21,0x09,0x00,0x39,0xcd,0x00,0x02,0xd1,0xcd,0x0b,0x02,0x21,0x08,0x00,0xc3,0x44,0x15,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x06,0x00,0xd1,0x19,0xcd,0x00,0x02,0x7c,0xb5,0xca,0x33,0x14,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x01,0x00,0xd1,0x19,0xcd,0x00,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xca,0x5a,0x14,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x00,0x00,0xd1,0x19,0xe5,0x21,0x09,0x00,0x39,0xcd,0x00,0x02,0xd1,0xcd,0x0b,0x02,0x21,0x00,0x00,0xc3,0x44,0x15,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x06,0x00,0xd1,0x19,0xcd,0x00,0x02,0x7c,0xb5,0xca,0x7f,0x14,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x05,0x00,0xd1,0x19,0xcd,0x00,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xca,0xa6,0x14,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x08,0x00,0xd1,0x19,0xe5,0x21,0x09,0x00,0x39,0xcd,0x00,0x02,0xd1,0xcd,0x0b,0x02,0x21,0x08,0x00,0xc3,0x44,0x15,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x08,0x00,0xd1,0x19,0xcd,0x00,0x02,0x7c,0xb5,0xca,0xcb,0x14,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x03,0x00,0xd1,0x19,0xcd,0x00,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xca,0xf2,0x14,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x06,0x00,0xd1,0x19,0xe5,0x21,0x09,0x00,0x39,0xcd,0x00,0x02,0xd1,0xcd,0x0b,0x02,0x21,0x06,0x00,0xc3,0x44,0x15,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x08,0x00,0xd1,0x19,0xcd,0x00,0x02,0x7c,0xb5,0xca,0x17,0x15,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x01,0x00,0xd1,0x19,0xcd,0x00,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xca,0x3e,0x15,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x02,0x00,0xd1,0x19,0xe5,0x21,0x09,0x00,0x39,0xcd,0x00,0x02,0xd1,0xcd,0x0b,0x02,0x21,0x02,0x00,0xc3,0x44,0x15,0x21,0x63,0x00,0xc3,0x44,0x15,0xe8,0x03,0xc9,0x21,0x02,0x00,0x39,0xcd,0x00,0x02,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x29,0x02,0x7c,0xb5,0xca,0x6a,0x15,0x21,0x02,0x00,0x39,0xcd,0x00,0x02,0xe5,0x21,0x03,0x00,0xd1,0xcd,0x35,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xca,0x7b,0x15,0x21,0x00,0x00,0xc3,0xbb,0x15,0xc3,0xbb,0x15,0x21,0x02,0x00,0x39,0xcd,0x00,0x02,0xe5,0x21,0x01,0x00,0xd1,0xcd,0x29,0x02,0x7c,0xb5,0xca,0x98,0x15,0x21,0x02,0x00,0xc3,0xbb,0x15,0xc3,0xbb,0x15,0x21,0x02,0x00,0x39,0xcd,0x00,0x02,0xe5,0x21,0x02,0x00,0xd1,0xcd,0x29,0x02,0x7c,0xb5,0xca,0xb5,0x15,0x21,0x06,0x00,0xc3,0xbb,0x15,0xc3,0xbb,0x15,0x21,0x08,0x00,0xc3,0xbb,0x15,0xc9,0xe8,0xff,0xe8,0xff,0x21,0x01,0x00,0x39,0xe5,0x21,0x0a,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x0a,0x00,0x39,0xcd,0x00,0x02,0xe5,0x3e,0x02,0xcd,0x77,0x08,0xe8,0x04,0xd1,0xcd,0x0b,0x02,0xe5,0x21,0x09,0x00,0xd1,0xcd,0x4c,0x02,0x7c,0xb5,0xca,0xf7,0x15,0x21,0x01,0x00,0x39,0xcd,0x00,0x02,0xc3,0x14,0x18,0x21,0x01,0x00,0x39,0xe5,0x21,0x0a,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x0a,0x00,0x39,0xcd,0x00,0x02,0xe5,0x3e,0x02,0xcd,0x2e,0x09,0xe8,0x04,0xd1,0xcd,0x0b,0x02,0xe5,0x21,0x09,0x00,0xd1,0xcd,0x4c,0x02,0x7c,0xb5,0xca,0x2e,0x16,0x21,0x01,0x00,0x39,0xcd,0x00,0x02,0xc3,0x14,0x18,0x21,0x01,0x00,0x39,0xe5,0x21,0x0a,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x0a,0x00,0x39,0xcd,0x00,0x02,0xe5,0x3e,0x02,0xcd,0x05,0x0a,0xe8,0x04,0xd1,0xcd,0x0b,0x02,0xe5,0x21,0x09,0x00,0xd1,0xcd,0x4c,0x02,0x7c,0xb5,0xca,0x65,0x16,0x21,0x01,0x00,0x39,0xcd,0x00,0x02,0xc3,0x14,0x18,0x21,0x01,0x00,0x39,0xe5,0x21,0x0a,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x0a,0x00,0x39,0xcd,0x00,0x02,0xe5,0x21,0x0a,0x00,0x39,0xcd,0x00,0x02,0xe5,0x3e,0x03,0xcd,0x0f,0x0c,0xe8,0x06,0xd1,0xcd,0x0b,0x02,0xe5,0x21,0x09,0x00,0xd1,0xcd,0x4c,0x02,0x7c,0xb5,0xca,0xa4,0x16,0x21,0x01,0x00,0x39,0xcd,0x00,0x02,0xc3,0x14,0x18,0x21,0x08,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x04,0x00,0xd1,0x19,0xcd,0x00,0x02,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x29,0x02,0x7c,0xb5,0xca,0xe3,0x16,0x21,0x08,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x04,0x00,0xd1,0x19,0xe5,0x21,0x08,0x00,0x39,0xcd,0x00,0x02,0xd1,0xcd,0x0b,0x02,0x21,0x04,0x00,0xc3,0x14,0x18,0xc3,0x82,0x17,0x21,0x00,0x00,0x39,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x0b,0x02,0x21,0x00,0x00,0x39,0xcd,0x00,0x02,0xe5,0x21,0x04,0x00,0xd1,0xcd,0x4c,0x02,0x7c,0xb5,0xc2,0x17,0x17,0xc3,0x82,0x17,0x21,0x00,0x00,0x39,0xe5,0xcd,0x00,0x02,0x23,0xd1,0xcd,0x0b,0x02,0x2b,0xc3,0xef,0x16,0x21,0x01,0x00,0x39,0xe5,0x21,0x06,0x00,0x39,0xcd,0x00,0x02,0xe5,0x21,0x03,0x00,0xd1,0xcd,0x22,0x02,0xe5,0x3e,0x01,0xcd,0x47,0x15,0xe8,0x02,0xd1,0xcd,0x0b,0x02,0x21,0x08,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x03,0x00,0x39,0xcd,0x00,0x02,0xd1,0x19,0xcd,0x00,0x02,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x29,0x02,0x7c,0xb5,0xca,0x75,0x17,0x21,0x08,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x03,0x00,0x39,0xcd,0x00,0x02,0xd1,0x19,0xe5,0x21,0x08,0x00,0x39,0xcd,0x00,0x02,0xd1,0xcd,0x0b,0x02,0x21,0x01,0x00,0x39,0xcd,0x00,0x02,0xc3,0x14,0x18,0xc3,0x06,0x17,0x21,0x01,0x00,0x39,0xe5,0x21,0x01,0x00,0xd1,0xcd,0x0b,0x02,0x21,0x08,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x03,0x00,0x39,0xcd,0x00,0x02,0xd1,0x19,0xcd,0x00,0x02,0x7c,0xb5,0xca,0xb6,0x17,0x21,0x01,0x00,0x39,0xcd,0x00,0x02,0xe5,0x21,0x09,0x00,0xd1,0xcd,0x4c,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xca,0xd3,0x17,0x21,0x01,0x00,0x39,0xe5,0xcd,0x00,0x02,0xe5,0x21,0x02,0x00,0xd1,0x19,0xd1,0xcd,0x0b,0x02,0xc3,0x8e,0x17,0x21,0x01,0x00,0x39,0xcd,0x00,0x02,0xe5,0x21,0x09,0x00,0xd1,0xcd,0x4c,0x02,0x7c,0xb5,0xca,0x0e,0x18,0x21,0x08,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x03,0x00,0x39,0xcd,0x00,0x02,0xd1,0x19,0xe5,0x21,0x08,0x00,0x39,0xcd,0x00,0x02,0xd1,0xcd,0x0b,0x02,0x21,0x01,0x00,0x39,0xcd,0x00,0x02,0xc3,0x14,0x18,0x21,0x63,0x00,0xc3,0x14,0x18,0xe8,0x02,0xc9,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x00,0x00,0x29,0xd1,0x19,0xe5,0x21,0x89,0x05,0xd1,0xcd,0x0e,0x02,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x01,0x00,0x29,0xd1,0x19,0xe5,0x21,0xac,0x05,0xd1,0xcd,0x0e,0x02,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x02,0x00,0x29,0xd1,0x19,0xe5,0x21,0xce,0x05,0xd1,0xcd,0x0e,0x02,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x03,0x00,0x29,0xd1,0x19,0xe5,0x21,0xed,0x05,0xd1,0xcd,0x0e,0x02,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x04,0x00,0x29,0xd1,0x19,0xe5,0x21,0x0a,0x06,0xd1,0xcd,0x0e,0x02,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x05,0x00,0x29,0xd1,0x19,0xe5,0x21,0x27,0x06,0xd1,0xcd,0x0e,0x02,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x06,0x00,0x29,0xd1,0x19,0xe5,0x21,0x42,0x06,0xd1,0xcd,0x0e,0x02,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x07,0x00,0x29,0xd1,0x19,0xe5,0x21,0x5b,0x06,0xd1,0xcd,0x0e,0x02,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x08,0x00,0x29,0xd1,0x19,0xe5,0x21,0x72,0x06,0xd1,0xcd,0x0e,0x02,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x09,0x00,0x29,0xd1,0x19,0xe5,0x21,0x89,0x06,0xd1,0xcd,0x0e,0x02,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x0a,0x00,0x29,0xd1,0x19,0xe5,0x21,0x9e,0x06,0xd1,0xcd,0x0e,0x02,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x0b,0x00,0x29,0xd1,0x19,0xe5,0x21,0xb2,0x06,0xd1,0xcd,0x0e,0x02,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x0c,0x00,0x29,0xd1,0x19,0xe5,0x21,0xc4,0x06,0xd1,0xcd,0x0e,0x02,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x0d,0x00,0x29,0xd1,0x19,0xe5,0x21,0xd6,0x06,0xd1,0xcd,0x0e,0x02,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x0e,0x00,0x29,0xd1,0x19,0xe5,0x21,0xe7,0x06,0xd1,0xcd,0x0e,0x02,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x0f,0x00,0x29,0xd1,0x19,0xe5,0x21,0xf7,0x06,0xd1,0xcd,0x0e,0x02,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x10,0x00,0x29,0xd1,0x19,0xe5,0x21,0x06,0x07,0xd1,0xcd,0x0e,0x02,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x11,0x00,0x29,0xd1,0x19,0xe5,0x21,0x14,0x07,0xd1,0xcd,0x0e,0x02,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x12,0x00,0x29,0xd1,0x19,0xe5,0x21,0x21,0x07,0xd1,0xcd,0x0e,0x02,0xc9,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x00,0x00,0x29,0xd1,0x19,0xe5,0x21,0x0a,0x06,0xd1,0xcd,0x0e,0x02,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x01,0x00,0x29,0xd1,0x19,0xe5,0x21,0x42,0x06,0xd1,0xcd,0x0e,0x02,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x02,0x00,0x29,0xd1,0x19,0xe5,0x21,0x72,0x06,0xd1,0xcd,0x0e,0x02,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x03,0x00,0x29,0xd1,0x19,0xe5,0x21,0x89,0x06,0xd1,0xcd,0x0e,0x02,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x04,0x00,0x29,0xd1,0x19,0xe5,0x21,0xb2,0x06,0xd1,0xcd,0x0e,0x02,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x05,0x00,0x29,0xd1,0x19,0xe5,0x21,0xd6,0x06,0xd1,0xcd,0x0e,0x02,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x06,0x00,0x29,0xd1,0x19,0xe5,0x21,0xf7,0x06,0xd1,0xcd,0x0e,0x02,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x07,0x00,0x29,0xd1,0x19,0xe5,0x21,0x06,0x07,0xd1,0xcd,0x0e,0x02,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x08,0x00,0x29,0xd1,0x19,0xe5,0x21,0x21,0x07,0xd1,0xcd,0x0e,0x02,0xc9,0x21,0x06,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x06,0x00,0x39,0xcd,0x00,0x02,0xe5,0x21,0x02,0x00,0xd1,0xcd,0xca,0x02,0xe5,0x21,0x06,0x00,0x39,0xcd,0x00,0x02,0xd1,0x19,0x29,0xd1,0x19,0xcd,0x06,0x02,0xc3,0xab,0x1a,0xc9,0xe8,0xda,0xe8,0xf7,0xe8,0xfd,0xe8,0xff,0xe8,0xff,0xe8,0xfe,0xe8,0xfe,0xe8,0xfe,0xe8,0xfe,0xe8,0xfe,0xe8,0xff,0x21,0x19,0x00,0x39,0xe5,0x3e,0x01,0xcd,0x17,0x18,0xe8,0x02,0x21,0x0b,0x00,0x39,0xe5,0x21,0x01,0x00,0xd1,0xcd,0x0b,0x02,0x21,0x03,0x00,0x39,0xe5,0x21,0x54,0x00,0xd1,0xcd,0x0e,0x02,0x21,0x01,0x00,0x39,0xe5,0x21,0x4c,0x00,0xd1,0xcd,0x0e,0x02,0x21,0x0c,0x00,0x39,0xe5,0x21,0x01,0x00,0xd1,0xcd,0x0b,0x02,0x21,0x0d,0x00,0x39,0xe5,0x21,0x01,0x00,0xd1,0x19,0xe5,0x21,0x01,0x00,0xd1,0xcd,0x0b,0x02,0x21,0x0d,0x00,0x39,0xe5,0x21,0x02,0x00,0xd1,0x19,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x0b,0x02,0x3e,0x00,0xcd,0x1d,0x22,0x3e,0x00,0xcd,0x21,0x26,0x21,0x00,0x00,0xe5,0x21,0x03,0x00,0xe5,0x3e,0x02,0xcd,0x5a,0x26,0xe8,0x04,0x21,0x09,0x00,0x39,0xe5,0x21,0x01,0x00,0xd1,0xcd,0x0e,0x02,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x28,0x00,0xd1,0xcd,0x4c,0x02,0x7c,0xb5,0xc2,0x6f,0x1b,0xc3,0x85,0x1b,0x21,0x09,0x00,0x39,0xe5,0xcd,0x06,0x02,0x23,0xd1,0xcd,0x0e,0x02,0x2b,0xc3,0x47,0x1b,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x00,0x00,0xe5,0x3e,0x02,0xcd,0x5a,0x26,0xe8,0x04,0xc3,0x5e,0x1b,0x3e,0x00,0xcd,0x13,0x26,0x21,0x00,0x00,0xe5,0x21,0x05,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x05,0x00,0x39,0xcd,0x06,0x02,0xe5,0x3e,0x03,0xcd,0x82,0x26,0xe8,0x06,0x21,0x01,0x00,0x7c,0xb5,0xca,0xc6,0x21,0x21,0x10,0x00,0x39,0xe5,0x3e,0x01,0xcd,0xf1,0x04,0xe8,0x02,0x21,0x10,0x00,0x39,0xe5,0x3e,0x01,0xcd,0x46,0x05,0xe8,0x02,0xcd,0xba,0x02,0x7c,0xb5,0xca,0xdc,0x1b,0x21,0x10,0x00,0x39,0xe5,0x3e,0x01,0xcd,0x13,0x08,0xe8,0x02,0xcd,0xba,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xca,0xee,0x20,0x21,0x00,0x00,0x39,0xe5,0xcd,0x00,0x02,0x23,0xd1,0xcd,0x0b,0x02,0x2b,0x21,0x09,0x00,0x39,0xe5,0x3e,0x00,0xcd,0x6c,0x25,0xd1,0xcd,0x0e,0x02,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x80,0x00,0xd1,0xcd,0x22,0x02,0x7c,0xb5,0xca,0x23,0x1c,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x40,0x00,0xd1,0xcd,0x22,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xca,0x4d,0x1c,0x21,0x0d,0x00,0x39,0xe5,0x21,0x01,0x00,0xd1,0x19,0xe5,0x21,0x0f,0x00,0x39,0xe5,0x21,0x01,0x00,0xd1,0x19,0xcd,0x00,0x02,0xcd,0xba,0x02,0xd1,0xcd,0x0b,0x02,0xc3,0xee,0x20,0x21,0x0d,0x00,0x39,0xe5,0x21,0x01,0x00,0xd1,0x19,0xcd,0x00,0x02,0xe5,0x21,0x01,0x00,0xd1,0xcd,0x29,0x02,0x7c,0xb5,0xca,0x7a,0x1c,0x21,0x0c,0x00,0x39,0xcd,0x00,0x02,0xe5,0x21,0x0d,0x00,0x39,0xcd,0x00,0x02,0xd1,0xcd,0x29,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xc2,0xb2,0x1c,0x21,0x0d,0x00,0x39,0xe5,0x21,0x02,0x00,0xd1,0x19,0xcd,0x00,0x02,0xe5,0x21,0x01,0x00,0xd1,0xcd,0x29,0x02,0x7c,0xb5,0xca,0xaf,0x1c,0x21,0x0c,0x00,0x39,0xcd,0x00,0x02,0xe5,0x21,0x0d,0x00,0x39,0xcd,0x00,0x02,0xd1,0xcd,0x2f,0x02,0xcd,0xc4,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xca,0x3f,0x20,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x04,0x00,0xd1,0xcd,0x22,0x02,0x7c,0xb5,0xca,0xdd,0x1c,0x21,0x01,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x10,0x00,0xd1,0xcd,0x35,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xca,0xf3,0x1c,0x21,0x01,0x00,0x39,0xe5,0xcd,0x06,0x02,0x2b,0xd1,0xcd,0x0e,0x02,0x23,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x08,0x00,0xd1,0xcd,0x22,0x02,0x7c,0xb5,0xca,0x16,0x1d,0x21,0x01,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x97,0x00,0xd1,0xcd,0x4c,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xca,0x2c,0x1d,0x21,0x01,0x00,0x39,0xe5,0xcd,0x06,0x02,0x23,0xd1,0xcd,0x0e,0x02,0x2b,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x02,0x00,0xd1,0xcd,0x22,0x02,0x7c,0xb5,0xca,0x4f,0x1d,0x21,0x03,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x08,0x00,0xd1,0xcd,0x35,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xca,0x65,0x1d,0x21,0x03,0x00,0x39,0xe5,0xcd,0x06,0x02,0x2b,0xd1,0xcd,0x0e,0x02,0x23,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x01,0x00,0xd1,0xcd,0x22,0x02,0x7c,0xb5,0xca,0x88,0x1d,0x21,0x03,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x9f,0x00,0xd1,0xcd,0x4c,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xca,0x9e,0x1d,0x21,0x03,0x00,0x39,0xe5,0xcd,0x06,0x02,0x23,0xd1,0xcd,0x0e,0x02,0x2b,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x04,0x00,0xd1,0xcd,0x22,0x02,0x7c,0xb5,0xc2,0xc1,0x1d,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x08,0x00,0xd1,0xcd,0x22,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xc2,0xd8,0x1d,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x02,0x00,0xd1,0xcd,0x22,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xc2,0xef,0x1d,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x01,0x00,0xd1,0xcd,0x22,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xca,0x1d,0x1e,0x21,0x00,0x00,0xe5,0x21,0x05,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x05,0x00,0x39,0xcd,0x06,0x02,0xe5,0x3e,0x03,0xcd,0x82,0x26,0xe8,0x06,0x21,0xe8,0x03,0xe5,0x3e,0x01,0xcd,0x52,0x25,0xe8,0x02,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x10,0x00,0xd1,0xcd,0x22,0x02,0x7c,0xb5,0xc2,0x40,0x1e,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x20,0x00,0xd1,0xcd,0x22,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xca,0x3c,0x20,0xe8,0xfe,0xe8,0xfe,0x21,0x02,0x00,0x39,0xe5,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x1b,0x00,0xd1,0xcd,0xa7,0x02,0xd1,0xcd,0x0e,0x02,0x21,0x00,0x00,0x39,0xe5,0x21,0x07,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x14,0x00,0xd1,0xcd,0xa7,0x02,0xd1,0xcd,0x0e,0x02,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x4a,0x00,0xd1,0xcd,0x46,0x02,0x7c,0xb5,0xca,0xa4,0x1e,0x21,0x02,0x00,0x39,0xe5,0xcd,0x06,0x02,0xe5,0x21,0x03,0x00,0xd1,0xcd,0xa7,0x02,0xd1,0xcd,0x0e,0x02,0x21,0x00,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x4a,0x00,0xd1,0xcd,0x46,0x02,0x7c,0xb5,0xca,0xcc,0x1e,0x21,0x00,0x00,0x39,0xe5,0xcd,0x06,0x02,0xe5,0x21,0x03,0x00,0xd1,0xcd,0xa7,0x02,0xd1,0xcd,0x0e,0x02,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x35,0x02,0x7c,0xb5,0xca,0xef,0x1e,0x21,0x00,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x35,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xca,0x06,0x1f,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x70,0x00,0xd1,0xcd,0x4c,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xca,0x1d,0x1f,0x21,0x00,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x70,0x00,0xd1,0xcd,0x4c,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xca,0x3a,0x20,0x21,0x02,0x00,0x39,0xe5,0x21,0x04,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x25,0x00,0xd1,0xcd,0xe6,0x02,0xd1,0xcd,0x0e,0x02,0x21,0x00,0x00,0x39,0xe5,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x25,0x00,0xd1,0xcd,0xe6,0x02,0xd1,0xcd,0x0e,0x02,0x21,0x0d,0x00,0x39,0xe5,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x03,0x00,0xd1,0xcd,0xca,0x02,0xe5,0x21,0x06,0x00,0x39,0xcd,0x06,0x02,0xd1,0x19,0xd1,0xcd,0x0e,0x02,0x21,0x1d,0x00,0x39,0xe5,0x21,0x0f,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x14,0x00,0x39,0xcd,0x00,0x02,0xe5,0x3e,0x03,0xcd,0x81,0x1a,0xe8,0x06,0xe5,0x3e,0x01,0xcd,0xa0,0x23,0xe8,0x02,0x21,0x14,0x00,0x39,0xe5,0x21,0x0f,0x00,0x39,0xcd,0x06,0x02,0xd1,0x19,0xcd,0x00,0x02,0xcd,0xba,0x02,0x7c,0xb5,0xca,0x1d,0x20,0x21,0x00,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x03,0x00,0xd1,0xcd,0xca,0x02,0xe5,0x21,0x04,0x00,0x39,0xcd,0x06,0x02,0xd1,0x19,0xe5,0x21,0x11,0x00,0x39,0xcd,0x00,0x02,0xe5,0x3e,0x02,0xcd,0x15,0x25,0xe8,0x04,0x21,0x14,0x00,0x39,0xe5,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x03,0x00,0xd1,0xcd,0xca,0x02,0xe5,0x21,0x06,0x00,0x39,0xcd,0x06,0x02,0xd1,0x19,0xd1,0x19,0xe5,0x21,0x11,0x00,0x39,0xcd,0x00,0x02,0xd1,0xcd,0x0b,0x02,0x21,0x0f,0x00,0x39,0xe5,0xcd,0x00,0x02,0xe5,0x21,0x03,0x00,0xd1,0xcd,0x1b,0x02,0xd1,0xcd,0x0b,0x02,0x3e,0x00,0xcd,0x6c,0x25,0xe5,0x21,0x10,0x00,0xe5,0x21,0x20,0x00,0xd1,0xcd,0x14,0x02,0xd1,0xcd,0x22,0x02,0x7c,0xb5,0xca,0x3a,0x20,0xc3,0x1d,0x20,0xe8,0x04,0xc3,0xeb,0x20,0x21,0x09,0x00,0x39,0xe5,0x21,0x12,0x00,0x39,0xe5,0x21,0x0f,0x00,0x39,0xcd,0x00,0x02,0xe5,0x21,0x06,0x00,0x39,0xcd,0x00,0x02,0xe5,0x3e,0x03,0xcd,0xbc,0x15,0xe8,0x06,0xd1,0xcd,0x0e,0x02,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x09,0x00,0xd1,0xcd,0x4c,0x02,0x7c,0xb5,0xca,0xd7,0x20,0x21,0x19,0x00,0x39,0xe5,0x21,0x0b,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x10,0x00,0x39,0xcd,0x00,0x02,0xe5,0x3e,0x03,0xcd,0x81,0x1a,0xe8,0x06,0xe5,0x3e,0x01,0xcd,0xa0,0x23,0xe8,0x02,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x0d,0x00,0x39,0xcd,0x00,0x02,0xe5,0x3e,0x02,0xcd,0x15,0x25,0xe8,0x04,0x21,0x10,0x00,0x39,0xe5,0x3e,0x01,0xcd,0x94,0x0b,0xe8,0x02,0xe5,0x21,0x02,0x00,0xd1,0xcd,0x35,0x02,0x7c,0xb5,0xca,0xd7,0x20,0x21,0x10,0x27,0xe5,0x3e,0x01,0xcd,0x52,0x25,0xe8,0x02,0x21,0x0b,0x00,0x39,0xe5,0xcd,0x00,0x02,0xe5,0x21,0x03,0x00,0xd1,0xcd,0x1b,0x02,0xd1,0xcd,0x0b,0x02,0xc3,0xb9,0x1b,0x21,0x0d,0x00,0x39,0xe5,0x21,0x01,0x00,0xd1,0x19,0xcd,0x00,0x02,0x7c,0xb5,0xc2,0x0d,0x21,0x21,0x0d,0x00,0x39,0xe5,0x21,0x02,0x00,0xd1,0x19,0xcd,0x00,0x02,0xcd,0xc4,0x02,0x7c,0xb5,0xca,0x33,0x21,0x3e,0x00,0xcd,0x6c,0x25,0xcd,0xba,0x02,0x7c,0xb5,0xca,0x33,0x21,0x21,0x00,0x00,0x39,0xe5,0xcd,0x00,0x02,0x23,0xd1,0xcd,0x0b,0x02,0x2b,0xc3,0x15,0x21,0x21,0x09,0x00,0x39,0xe5,0x21,0x00,0x00,0xd1,0xcd,0x0e,0x02,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x09,0x00,0xd1,0xcd,0x4c,0x02,0x7c,0xb5,0xc2,0x67,0x21,0xc3,0x7d,0x21,0x21,0x09,0x00,0x39,0xe5,0xcd,0x06,0x02,0x23,0xd1,0xcd,0x0e,0x02,0x2b,0xc3,0x3f,0x21,0x21,0x09,0x00,0x39,0xcd,0x06,0x02,0xe5,0x21,0x00,0x00,0xe5,0x3e,0x02,0xcd,0x15,0x25,0xe8,0x04,0xc3,0x56,0x21,0x21,0x0b,0x00,0x39,0xe5,0x21,0x01,0x00,0xd1,0xcd,0x0b,0x02,0x21,0x0c,0x00,0x39,0xe5,0xcd,0x00,0x02,0xe5,0x21,0x03,0x00,0xd1,0xcd,0x1b,0x02,0xd1,0xcd,0x0b,0x02,0x21,0xe8,0x03,0xe5,0x3e,0x01,0xcd,0x52,0x25,0xe8,0x02,0x3e,0x00,0xcd,0x6c,0x25,0x7c,0xb5,0xca,0xc3,0x21,0x21,0x00,0x00,0x39,0xe5,0xcd,0x00,0x02,0x23,0xd1,0xcd,0x0b,0x02,0x2b,0xc3,0xa8,0x21,0xc3,0xa5,0x1b,0xe8,0x3f,0xc9,0xcd,0xac,0x03,0xb7,0x20,0xfa,0x01,0xe8,0x03,0xcd,0xef,0x03,0xcd,0xac,0x03,0xb7,0x20,0xee,0xc9,0x3e,0x77,0xea,0x24,0xff,0x3e,0xff,0xea,0x25,0xff,0x3e,0x8f,0xea,0x26,0xff,0xc9,0x3e,0x8f,0xea,0x16,0xff,0x3e,0xf2,0xea,0x17,0xff,0x7d,0xea,0x18,0xff,0x3e,0x80,0xb4,0xea,0x19,0xff,0xc9,0x3e,0xbf,0xea,0x16,0xff,0x3e,0xf0,0xea,0x17,0xff,0x18,0xe9,0xaf,0xea,0x16,0xff,0xea,0x17,0xff,0xea,0x18,0xff,0x3e,0x82,0xea,0x19,0xff,0xc9,0xcd,0xe4,0x03,0x3e,0x11,0xe0,0x40,0xcd,0x0f,0x04,0xcd,0xb0,0x22,0x01,0xd0,0x2a,0xcd,0x86,0x23,0x3e,0x91,0xe0,0x40,0xcd,0xc9,0x21,0xcd,0x1d,0x24,0xcd,0xac,0x03,0xb7,0x28,0xf7,0xcd,0xc9,0x21,0x01,0x10,0x2d,0xcd,0x86,0x23,0xcd,0xa0,0x24,0xcd,0xac,0x03,0xb7,0x28,0xf7,0xcd,0xc9,0x21,0x01,0xd0,0x2a,0xcd,0x86,0x23,0xcd,0x5f,0x22,0xc9,0xcd,0xe4,0x03,0x01,0xb0,0x27,0x21,0x00,0x98,0x11,0x20,0x00,0xcd,0x91,0x23,0x01,0xb0,0x27,0x21,0xe0,0x99,0x11,0x20,0x00,0xcd,0x91,0x23,0x01,0xb0,0x27,0x21,0x00,0x9a,0x11,0x20,0x00,0xcd,0x91,0x23,0x01,0xb0,0x27,0x21,0x20,0x9a,0x11,0x20,0x00,0xcd,0x91,0x23,0xc9,0xcd,0xe4,0x03,0x16,0x04,0xd5,0xe5,0xc5,0x11,0x04,0x00,0xcd,0x91,0x23,0xc1,0xe1,0x11,0x20,0x00,0x19,0x03,0x03,0x03,0x03,0xd1,0x15,0x20,0xe9,0xc9,0x16,0x00,0x1e,0x04,0x21,0x00,0x80,0x01,0xd0,0x26,0x0a,0x22,0x22,0x03,0x15,0x20,0xf9,0x1d,0x20,0xf6,0x21,0x00,0x88,0x01,0xd0,0x26,0x16,0x00,0x1e,0x04,0x0a,0x77,0x23,0x77,0x23,0x03,0x15,0x20,0xf7,0x1d,0x20,0xf4,0xc9,0x78,0xea,0x05,0xc0,0x79,0xea,0x06,0xc0,0xc9,0x78,0x3d,0xea,0x01,0xc0,0x79,0x3d,0xea,0x02,0xc0,0x7a,0x3d,0xea,0x03,0xc0,0x7b,0x3d,0xea,0x04,0xc0,0xc9,0x0a,0xb7,0xc8,0xcd,0x09,0x23,0x03,0x18,0xf7,0x3e,0x20,0xc3,0x09,0x23,0x3e,0x0d,0xf5,0xc5,0xd5,0xe5,0xcd,0x15,0x23,0xe1,0xd1,0xc1,0xf1,0xc9,0xfe,0x08,0x28,0x4a,0xfe,0x0d,0x20,0x0a,0x3e,0x20,0xcd,0x85,0x23,0xcd,0x47,0x23,0x18,0x06,0xcd,0x85,0x23,0xcd,0x32,0x23,0x3e,0x5f,0xc3,0x85,0x23,0xfa,0x01,0xc0,0x47,0xfa,0x03,0xc0,0x90,0x3c,0x47,0xfa,0x05,0xc0,0xb8,0x28,0x05,0x3c,0xea,0x05,0xc0,0xc9,0xfa,0x02,0xc0,0x47,0xfa,0x04,0xc0,0x90,0x3c,0x47,0xfa,0x06,0xc0,0xb8,0x28,0x0a,0xfa,0x06,0xc0,0x3c,0xea,0x06,0xc0,0xaf,0x18,0xe1,0x18,0xfb,0xfa,0x05,0xc0,0xfe,0x01,0xc8,0xf5,0x3e,0x20,0xcd,0x85,0x23,0xf1,0x3d,0xea,0x05,0xc0,0x3e,0x5f,0xc3,0x85,0x23,0x3e,0x01,0xea,0x07,0xc0,0xc9,0xaf,0xea,0x07,0xc0,0xc9,0xc9,0xc9,0x21,0x00,0x98,0x18,0x03,0x21,0x00,0x9c,0x11,0x00,0x04,0xf0,0x41,0xe6,0x02,0x20,0xfa,0x0a,0x22,0x03,0x1b,0x7a,0xb3,0x20,0xf2,0xc9,0xc1,0xe1,0xe5,0xc5,0xcd,0xec,0x21,0xc9,0x21,0xc6,0x02,0xcd,0xee,0x21,0xc9,0x3e,0x8c,0xcd,0xa8,0x23,0xc9,0x3e,0x86,0xcd,0xa8,0x23,0xc9,0x3e,0x83,0xcd,0xa8,0x23,0xc9,0x3e,0x82,0xcd,0xa8,0x23,0xc9,0x3e,0x81,0xcd,0xa8,0x23,0xc9,0x01,0xff,0xff,0xcd,0xef,0x03,0xc9,0x01,0xff,0x7f,0xcd,0xef,0x03,0xc9,0x01,0xc0,0x5d,0xcd,0xef,0x03,0xc9,0xcd,0xbb,0x23,0xcd,0xac,0x03,0xb7,0xc0,0x01,0x80,0xbb,0xcd,0xef,0x03,0xcd,0xbb,0x23,0xcd,0xac,0x03,0xb7,0xc0,0xcd,0xd4,0x23,0xcd,0xc1,0x23,0xcd,0xac,0x03,0xb7,0xc0,0xcd,0xdb,0x23,0xcd,0xc1,0x23,0xcd,0xac,0x03,0xb7,0xc0,0xcd,0xdb,0x23,0xcd,0xc1,0x23,0xcd,0xac,0x03,0xb7,0xc0,0xcd,0xdb,0x23,0xc9,0xcd,0xe2,0x23,0xcd,0xac,0x03,0xb7,0xc0,0xcd,0xe2,0x23,0xcd,0xac,0x03,0xb7,0xc0,0xcd,0xe2,0x23,0xcd,0xac,0x03,0xb7,0xc0,0x3e,0x8c,0x21,0xb6,0x04,0xcd,0xec,0x21,0xcd,0xac,0x03,0xb7,0xc0,0xcd,0xcd,0x23,0x3e,0x8c,0x21,0x83,0x04,0xcd,0xec,0x21,0xcd,0xac,0x03,0xb7,0xc0,0xcd,0xcd,0x23,0xc9,0x21,0x5b,0x06,0xcd,0x01,0x22,0xc9,0x21,0x2d,0x07,0xcd,0x01,0x22,0xc9,0x3e,0x84,0xcd,0x5d,0x24,0xc9,0x3e,0x84,0xcd,0x56,0x24,0xc9,0x01,0x50,0xc3,0xcd,0xef,0x03,0xcd,0x0d,0x22,0x01,0xe8,0x03,0xcd,0xef,0x03,0xc9,0x01,0x35,0x82,0xcd,0xef,0x03,0xcd,0x0d,0x22,0x01,0xe8,0x03,0xcd,0xef,0x03,0xc9,0x01,0xa8,0x61,0xcd,0xef,0x03,0xcd,0x0d,0x22,0x01,0xe8,0x03,0xcd,0xef,0x03,0xc9,0xcd,0x6a,0x24,0xcd,0x70,0x24,0xcd,0xac,0x03,0xb7,0xc0,0xcd,0x6a,0x24,0xcd,0x70,0x24,0xcd,0xac,0x03,0xb7,0xc0,0xcd,0x64,0x24,0xcd,0x70,0x24,0xcd,0xac,0x03,0xb7,0xc0,0xcd,0x64,0x24,0xcd,0x80,0x24,0xcd,0xac,0x03,0xb7,0xc0,0xcd,0x6a,0x24,0xcd,0x70,0x24,0xcd,0xac,0x03,0xb7,0xc0,0xcd,0x6a,0x24,0xcd,0x70,0x24,0xcd,0xac,0x03,0xb7,0xc0,0xcd,0x6a,0x24,0xcd,0x80,0x24,0xcd,0xac,0x03,0xb7,0xc0,0xcd,0x64,0x24,0xcd,0x90,0x24,0xcd,0xac,0x03,0xb7,0xc0,0xcd,0x64,0x24,0xcd,0x90,0x24,0xcd,0xac,0x03,0xb7,0xc0,0xcd,0x64,0x24,0xcd,0x90,0x24,0xcd,0xac,0x03,0xb7,0xc0,0xcd,0x64,0x24,0xcd,0x90,0x24,0xc9,0x21,0x04,0x00,0x39,0x7e,0x21,0x9e,0x26,0xb7,0x28,0x05,0x23,0x23,0x3d,0x20,0xfb,0x2a,0x4f,0x2a,0x47,0xc5,0x21,0x04,0x00,0x39,0x7e,0xb7,0x28,0x08,0x3d,0x28,0x0a,0x01,0xc0,0x26,0x18,0x08,0x01,0xb0,0x27,0x18,0x03,0x01,0xb0,0x26,0xe1,0xcd,0x93,0x22,0xc9,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0xcd,0x8f,0x03,0xc9,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0x44,0x4d,0xcd,0xef,0x03,0xc9,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0x44,0x4d,0xcd,0xf5,0x03,0xc9,0xcd,0xac,0x03,0x26,0x00,0x6f,0xc9,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0x45,0xcd,0xdd,0x03,0x26,0x00,0x6f,0xc9,0xcd,0x9c,0x03,0xc9,0xf0,0x40,0xf6,0x01,0xe0,0x40,0xc9,0xf0,0x40,0xe6,0xfe,0xe0,0x40,0xc9,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0x44,0x4d,0x21,0x04,0x00,0x39,0xcd,0x06,0x02,0x29,0x29,0x29,0x29,0x54,0x5d,0x21,0x06,0x00,0x39,0xcd,0x06,0x02,0x29,0x29,0x29,0x29,0xc5,0x01,0x00,0x90,0x09,0xc1,0xcd,0x2d,0x04,0xc9,0x21,0x08,0x00,0x39,0xcd,0x06,0x02,0x5d,0x21,0x0a,0x00,0x39,0xcd,0x06,0x02,0x55,0x21,0x04,0x00,0x39,0xcd,0x06,0x02,0x4d,0x21,0x06,0x00,0x39,0xcd,0x06,0x02,0x45,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0xc5,0x44,0x4d,0xe1,0xcd,0x6f,0x04,0xc9,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0x7d,0xfe,0x00,0x28,0x06,0x45,0xf0,0x42,0x80,0xe0,0x42,0x21,0x04,0x00,0x39,0xcd,0x06,0x02,0x55,0xfe,0x00,0x28,0x06,0x45,0xf0,0x43,0x80,0xe0,0x43,0xc9,0xf0,0x40,0xf6,0x02,0xe0,0x40,0xc9,0xf0,0x40,0xe6,0xfd,0xe0,0x40,0xc9,0xf0,0x40,0xe6,0xfb,0xe0,0x40,0xc9,0xf0,0x40,0xf6,0x04,0xe0,0x40,0xc9,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0x44,0x4d,0x21,0x04,0x00,0x39,0xcd,0x06,0x02,0x29,0x29,0x29,0x29,0x54,0x5d,0x21,0x06,0x00,0x39,0xcd,0x06,0x02,0x29,0x29,0x29,0x29,0xc5,0x01,0x00,0x80,0x09,0xc1,0xcd,0x2d,0x04,0xc9,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0x55,0x21,0x04,0x00,0x39,0xcd,0x06,0x02,0x4d,0xcd,0xc6,0x04,0xc9,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0x55,0x21,0x04,0x00,0x39,0xcd,0x06,0x02,0x4d,0xcd,0xdb,0x04,0xc9,0x21,0x02,0x00,0x39,0xcd,0x06,0x02,0x5d,0x21,0x04,0x00,0x39,0xcd,0x06,0x02,0x55,0x21,0x06,0x00,0x39,0xcd,0x06,0x02,0x4d,0xcd,0xab,0x04,0xc9,0x23,0x98,0x28,0x98,0x2d,0x98,0xc3,0x98,0xc8,0x98,0xcd,0x98,0x63,0x99,0x68,0x99,0x6d,0x99,0x06,0x00,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x07,0x0b,0x0a,0x00,0x0d,0x0e,0x09,0x0f,0x00,0x10,0x11,0x00,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x00,0x1a,0x1b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x18,0x18,0x18,0xff,0xff,0x18,0x18,0x18,0x80,0x40,0x20,0x10,0x08,0x04,0x02,0x01,0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x00,0x00,0x0c,0x0e,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x60,0xe0,0xc0,0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xc0,0xe0,0x70,0x38,0x1c,0x0e,0x07,0x03,0x07,0x0e,0x1c,0x38,0x70,0xe0,0xc0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x07,0x0e,0x0c,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xc0,0xe0,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0x3f,0x7f,0x00,0x00,0x00,0x00,0x00,0xe0,0xf8,0xfc,0x00,0x01,0x03,0x07,0x07,0x0f,0x0f,0x0f,0xff,0xf8,0xe0,0xc0,0x80,0x80,0x00,0x00,0xfe,0x3f,0x0f,0x07,0x03,0x03,0x01,0x01,0x00,0x00,0x80,0xc0,0xc0,0xe0,0xe0,0xe0,0x0f,0x0f,0x0f,0x0f,0x07,0x07,0x03,0x01,0x00,0x00,0x00,0x80,0x80,0xc0,0xe0,0xf8,0x01,0x01,0x01,0x03,0x03,0x07,0x0f,0x3f,0xe0,0xe0,0xe0,0xe0,0xc0,0xc0,0x80,0x00,0xff,0x7f,0x3f,0x0f,0x00,0x00,0x00,0x00,0xfe,0xfc,0xf8,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x78,0x78,0x78,0x30,0x00,0x30,0x00,0x6c,0x6c,0x6c,0x00,0x00,0x00,0x00,0x00,0x6c,0x6c,0xfe,0x6c,0xfe,0x6c,0x6c,0x00,0x30,0x7c,0xc0,0x78,0x0c,0xf8,0x30,0x00,0x00,0xc6,0xcc,0x18,0x30,0x66,0xc6,0x00,0x38,0x6c,0x38,0x76,0xdc,0xcc,0x76,0x00,0x60,0x60,0xc0,0x00,0x00,0x00,0x00,0x00,0x18,0x30,0x60,0x60,0x60,0x30,0x18,0x00,0x60,0x30,0x18,0x18,0x18,0x30,0x60,0x00,0x00,0x66,0x3c,0xff,0x3c,0x66,0x00,0x00,0x00,0x30,0x30,0xfc,0x30,0x30,0x00,0x00,0x18,0x18,0x18,0xff,0xff,0x18,0x18,0x18,0x00,0x00,0x00,0xfc,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x06,0x0c,0x18,0x30,0x60,0xc0,0x80,0x00,0x7c,0xc6,0xce,0xde,0xf6,0xe6,0x7c,0x00,0x30,0x70,0x30,0x30,0x30,0x30,0xfc,0x00,0x78,0xcc,0x0c,0x38,0x60,0xcc,0xfc,0x00,0x78,0xcc,0x0c,0x38,0x0c,0xcc,0x78,0x00,0x1c,0x3c,0x6c,0xcc,0xfe,0x0c,0x1e,0x00,0xfc,0xc0,0xf8,0x0c,0x0c,0xcc,0x78,0x00,0x38,0x60,0xc0,0xf8,0xcc,0xcc,0x78,0x00,0xfc,0xcc,0x0c,0x18,0x30,0x30,0x30,0x00,0x78,0xcc,0xcc,0x78,0xcc,0xcc,0x78,0x00,0x78,0xcc,0xcc,0x7c,0x0c,0x18,0x70,0x00,0x00,0x30,0x30,0x00,0x00,0x30,0x30,0x00,0x00,0x30,0x30,0x00,0x00,0x30,0x30,0x60,0x18,0x30,0x60,0xc0,0x60,0x30,0x18,0x00,0x00,0x00,0xfc,0x00,0x00,0xfc,0x00,0x00,0x60,0x30,0x18,0x0c,0x18,0x30,0x60,0x00,0x78,0xcc,0x0c,0x18,0x30,0x00,0x30,0x00,0x7c,0xc6,0xde,0xde,0xde,0xc0,0x78,0x00,0x30,0x78,0xcc,0xcc,0xfc,0xcc,0xcc,0x00,0xfc,0x66,0x66,0x7c,0x66,0x66,0xfc,0x00,0x3c,0x66,0xc0,0xc0,0xc0,0x66,0x3c,0x00,0xf8,0x6c,0x66,0x66,0x66,0x6c,0xf8,0x00,0x7e,0x60,0x60,0x78,0x60,0x60,0x7e,0x00,0x7e,0x60,0x60,0x78,0x60,0x60,0x60,0x00,0x3c,0x66,0xc0,0xc0,0xce,0x66,0x3e,0x00,0xcc,0xcc,0xcc,0xfc,0xcc,0xcc,0xcc,0x00,0x78,0x30,0x30,0x30,0x30,0x30,0x78,0x00,0x1e,0x0c,0x0c,0x0c,0xcc,0xcc,0x78,0x00,0xe6,0x66,0x6c,0x78,0x6c,0x66,0xe6,0x00,0x60,0x60,0x60,0x60,0x60,0x60,0x7e,0x00,0xc6,0xee,0xfe,0xfe,0xd6,0xc6,0xc6,0x00,0xc6,0xe6,0xf6,0xde,0xce,0xc6,0xc6,0x00,0x38,0x6c,0xc6,0xc6,0xc6,0x6c,0x38,0x00,0xfc,0x66,0x66,0x7c,0x60,0x60,0xf0,0x00,0x78,0xcc,0xcc,0xcc,0xdc,0x78,0x1c,0x00,0xfc,0x66,0x66,0x7c,0x6c,0x66,0xe6,0x00,0x78,0xcc,0xe0,0x70,0x1c,0xcc,0x78,0x00,0xfc,0x30,0x30,0x30,0x30,0x30,0x30,0x00,0xcc,0xcc,0xcc,0xcc,0xcc,0xcc,0xfc,0x00,0xcc,0xcc,0xcc,0xcc,0xcc,0x78,0x30,0x00,0xc6,0xc6,0xc6,0xd6,0xfe,0xee,0xc6,0x00,0xc6,0xc6,0x6c,0x38,0x38,0x6c,0xc6,0x00,0xcc,0xcc,0xcc,0x78,0x30,0x30,0x78,0x00,0xfe,0x06,0x0c,0x18,0x30,0x60,0xfe,0x00,0x78,0x60,0x60,0x60,0x60,0x60,0x78,0x00,0xc0,0x60,0x30,0x18,0x0c,0x06,0x02,0x00,0x78,0x18,0x18,0x18,0x18,0x18,0x78,0x00,0x10,0x38,0x6c,0xc6,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x30,0x30,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x0c,0x7c,0xcc,0x76,0x00,0xe0,0x60,0x60,0x7c,0x66,0x66,0xdc,0x00,0x00,0x00,0x78,0xcc,0xc0,0xcc,0x78,0x00,0x1c,0x0c,0x0c,0x7c,0xcc,0xcc,0x76,0x00,0x00,0x00,0x78,0xcc,0xfc,0xc0,0x78,0x00,0x38,0x6c,0x60,0xf0,0x60,0x60,0xf0,0x00,0x00,0x00,0x76,0xcc,0xcc,0x7c,0x0c,0xf8,0xe0,0x60,0x6c,0x76,0x66,0x66,0xe6,0x00,0x30,0x00,0x70,0x30,0x30,0x30,0x78,0x00,0x0c,0x00,0x0c,0x0c,0x0c,0xcc,0xcc,0x78,0xe0,0x60,0x66,0x6c,0x78,0x6c,0xe6,0x00,0x70,0x30,0x30,0x30,0x30,0x30,0x78,0x00,0x00,0x00,0xcc,0xfe,0xfe,0xd6,0xc6,0x00,0x00,0x00,0xf8,0xcc,0xcc,0xcc,0xcc,0x00,0x00,0x00,0x78,0xcc,0xcc,0xcc,0x78,0x00,0x00,0x00,0xdc,0x66,0x66,0x7c,0x60,0xf0,0x00,0x00,0x76,0xcc,0xcc,0x7c,0x0c,0x1e,0x00,0x00,0xdc,0x76,0x66,0x60,0xf0,0x00,0x00,0x00,0x7c,0xc0,0x78,0x0c,0xf8,0x00,0x10,0x30,0x7c,0x30,0x30,0x34,0x18,0x00,0x00,0x00,0xcc,0xcc,0xcc,0xcc,0x76,0x00,0x00,0x00,0xcc,0xcc,0xcc,0x78,0x30,0x00,0x00,0x00,0xc6,0xd6,0xfe,0xfe,0x6c,0x00,0x00,0x00,0xc6,0x6c,0x38,0x6c,0xc6,0x00,0x00,0x00,0xcc,0xcc,0xcc,0x7c,0x0c,0xf8,0x00,0x00,0xfc,0x98,0x30,0x64,0xfc,0x00,0x1c,0x30,0x30,0xe0,0x30,0x30,0x1c,0x00,0x18,0x18,0x18,0x00,0x18,0x18,0x18,0x00,0xe0,0x30,0x30,0x1c,0x30,0x30,0xe0,0x00,0x76,0xdc,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x38,0x6c,0xc6,0xc6,0xfe,0x00,0x20,0x20,0x20,0x47,0x42,0x20,0x54,0x49,0x43,0x2d,0x54,0x41,0x43,0x2d,0x54,0x4f,0x45,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x02,0x02,0x02,0x03,0x02,0x02,0x02,0x02,0x03,0x02,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x02,0x02,0x02,0x03,0x02,0x02,0x02,0x02,0x03,0x02,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x20,0x43,0x6f,0x70,0x79,0x72,0x69,0x67,0x68,0x74,0x20,0x31,0x39,0x39,0x36,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x4e,0x6f,0x72,0x6d,0x61,0x6e,0x20,0x4e,0x69,0x74,0x68,0x6d,0x61,0x6e,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6e,0x72,0x6e,0x40,0x74,0x65,0x7a,0x63,0x61,0x74,0x2e,0x63,0x6f,0x6d,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x47,0x42,0x20,0x54,0x49,0x43,0x2d,0x54,0x41,0x43,0x2d,0x54,0x4f,0x45,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x4e,0x6f,0x6e,0x2d,0x50,0x72,0x6f,0x66,0x69,0x74,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x44,0x69,0x73,0x74,0x72,0x69,0x62,0x75,0x74,0x69,0x6f,0x6e,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x45,0x6e,0x63,0x6f,0x75,0x72,0x61,0x67,0x65,0x64,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x54,0x68,0x61,0x6e,0x6b,0x73,0x20,0x74,0x6f,0x3a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x4d,0x61,0x72,0x63,0x65,0x6c,0x20,0x64,0x65,0x20,0x4b,0x6f,0x67,0x65,0x6c,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x4d,0x69,0x63,0x61,0x68,0x20,0x44,0x6f,0x77,0x74,0x79,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x4d,0x61,0x72,0x61,0x74,0x20,0x46,0x61,0x79,0x7a,0x75,0x6c,0x6c,0x69,0x6e,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x50,0x61,0x73,0x63,0x61,0x6c,0x20,0x46,0x65,0x6c,0x62,0x65,0x72,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x4a,0x65,0x66,0x66,0x20,0x46,0x72,0x6f,0x68,0x77,0x65,0x69,0x6e,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x44,0x72,0x2e,0x20,0x50,0x61,0x6e,0x20,0x6f,0x66,0x20,0x41,0x6e,0x74,0x68,0x72,0x6f,0x78,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x43,0x6f,0x70,0x79,0x72,0x69,0x67,0x68,0x74,0x20,0x31,0x39,0x39,0x36,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x4e,0x6f,0x72,0x6d,0x61,0x6e,0x20,0x4e,0x69,0x74,0x68,0x6d,0x61,0x6e,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6e,0x72,0x6e,0x40,0x74,0x65,0x7a,0x63,0x61,0x74,0x2e,0x63,0x6f,0x6d,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
bios = {0x31,0xfe,0xff,0xaf,0x21,0xff,0x9f,0x32,0xcb,0x7c,0x20,0xfb,0x21,0x26,0xff,0x0e,0x11,0x3e,0x80,0x32,0xe2, 0x0c,0x3e,0xf3,0xe2,0x32,0x3e,0x77,0x77,0x3e,0xfc,0xe0,0x47,0x11,0x04,0x01,0x21,0x10,0x80,0x1a,0xcd,0x95,0x00,0xcd,0x96,0x00,0x13,0x7b,0xfe,0x34,0x20,0xf3,0x11,0xd8,0x00,0x06,0x08,0x1a,0x13,0x22,0x23,0x05,0x20,0xf9,0x3e,0x19,0xea,0x10,0x99,0x21,0x2f,0x99,0x0e,0x0c,0x3d,0x28,0x08,0x32,0x0d,0x20,0xf9,0x2e,0x0f,0x18,0xf3,0x67,0x3e,0x64,0x57,0xe0,0x42,0x3e,0x91,0xe0,0x40,0x04,0x1e,0x02,0x0e,0x0c,0xf0,0x44,0xfe,0x90,0x20,0xfa,0x0d,0x20,0xf7,0x1d,0x20,0xf2,0x0e,0x13,0x24,0x7c,0x1e,0x83,0xfe,0x62,0x28,0x06,0x1e,0xc1,0xfe,0x64,0x20,0x06,0x7b,0xe2,0x0c,0x3e,0x87,0xe2,0xf0,0x42,0x90,0xe0,0x42,0x15,0x20,0xd2,0x05,0x20,0x4f,0x16,0x20,0x18,0xcb,0x4f,0x06,0x04,0xc5,0xcb,0x11,0x17,0xc1,0xcb,0x11,0x17,0x05,0x20,0xf5,0x22,0x23,0x22,0x23,0xc9,0xce,0xed,0x66,0x66,0xcc,0x0d,0x00,0x0b,0x03,0x73,0x00,0x83,0x00,0x0c,0x00,0x0d,0x00,0x08,0x11,0x1f,0x88,0x89,0x00,0x0e,0xdc,0xcc,0x6e,0xe6,0xdd,0xdd,0xd9,0x99,0xbb,0xbb,0x67,0x63,0x6e,0x0e,0xec,0xcc,0xdd,0xdc,0x99,0x9f,0xbb,0xb9,0x33,0x3e,0x3c,0x42,0xb9,0xa5,0xb9,0xa5,0x42,0x3c,0x21,0x04,0x01,0x11,0xa8,0x00,0x1a,0x13,0xbe,0x20,0xfe,0x23,0x7d,0xfe,0x34,0x20,0xf5,0x06,0x19,0x78,0x86,0x23,0x05,0x20,0xfb,0x86,0x20,0xfe,0x3e,0x01,0xe0,0x50}


Flag = class()

function Flag:init(default)
  self.flag = default
end

function Flag:isSet()
  return self.flag
end

function Flag:toBit()
  if self.flag then
    return 1
  else
    return 0
  end
end

function Flag:set()
  self.flag = true
end

function Flag:reset()
  self.flag = false
end

ZeroFlag = class(Flag) 

function ZeroFlag:isZero(number)
  n = number
  if n < 0 then
    n = 0
  end
  
  return n == 0
end

SubtractFlag = class(Flag)

CarryFlag = class(Flag)

function CarryFlag:isCarryHigh_8b(number)
  return number > 0xff
end

function CarryFlag:isCarryHigh_16b(number)
  return number > 0xffff
end

function CarryFlag:isCarryLow(number)
  return number < 0
end

-- The Rotates have their own family of carry flags
function CarryFlag:rotateLeftCarry(number)
  return bitwiseAnd_8b(number, 0x80) > 0
end

function CarryFlag:rotateRightCarry(number)
  return bitwiseAnd_8b(shift, 0x01) > 0
end

HalfCarryFlag = class(Flag)

function HalfCarryFlag:isHalfCarryAdd_8b (a, b)
  if bitwiseAnd_8b(bitwiseAnd_8b(a, 0xf) + bitwiseAnd_8b(b, 0xf), 0xf0) > 0 then
    return true
  else
    return false
  end
end

function HalfCarryFlag:isHalfCarryAdd_16b (a, b)
  if bitwiseAnd_16b(bitwiseAnd_16b(a, 0xfff) + bitwiseAnd_16b(b, 0xfff), 0xfff0) > 0 then
    return true
  else
    return false
  end
end

function HalfCarryFlag:isHalfCarrySub_8b (a, b)
  if bitwiseAnd_8b(bitwiseAnd_8b(a, 0xf) - bitwiseAnd_8b(b, 0xf), 0x08) ~= a then
    return true
  else
    return false
  end
end


Interrupt = class()

-- custom = A table with a function that can be called by running custom.run(), custom.check(), and custom.fail(). It also stores any nessecary variables
-- location = The location that gets called when the interrupt is triggered
-- bit = Bit of the interrupt in the ime register
function Interrupt:init(custom, location, bit)
  self.custom = custom
  self.location = location
  self.bit = bit
end

function Interrupt:check()
  return stop == false and ime == true and bitwiseAnd_8b(memory:read_8b(0xffff), self.bit) > 0
end

function Interrupt:callInterrupt()
  flags = toBits(memory:read_8b(0xff0f), 8)
  flags[self.bit] = 1
  memory:write_8b(0xff0f, toInt(flags))

  pc = self.location
  DI()
  call(nil, pc)
end

function Interrupt:run()
  if self:check() then
    if self.custom.check ~= nil and self.custom.check(self.custom.variable) then
      halt = false
      if self.custom.run ~= nil then
        self.custom.variable = self.custom.run(self.custom.variable)
      end

      self:callInterrupt()

      return true
    elseif self.custom.fail ~= nil then
      self.custom.variable = self.custom.fail(self.custom.variable)
    end

    return false
  end
end

vBlankCheck = function (vBlank)
  return vBlank >= 59
end

vBlankRun = function (vBlank)
  vBlank = 0
  return vBlank
end

vBlankFail = function (vBlank)
  flags = toBits(memory:read_8b(0xff0f), 8)
  flags[1] = 0
  memory:write_8b(0xff0f, toInt(flags))

  vBlank = vBlank + ((timer.getMilliSecCounter() - old) * speedScaler)
  return vBlank
end

timerOverflowCheck = function (variable)
  return memory:read_8b(0xff05) > 0xff
end

timerOverflowRun = function (variable)
  memory:write_8b(0xff05, 0)
end

scanLineCheck = function (variable)
  return scanLine == compareScanLine and bitwiseAnd_8b(0xff41, 0x40) > 0
end

keyBounceCheck = function (variable)
  shouldRun = false
  for i = 1, #buttons do
    if buttons[i]:checkInterrupt() then
      shouldRun = true
    end
  end
  
  return shouldRun
end


Memory = class()

function Memory:init(rom)
  self.ram = {}

  for i = 1, 0xffff + 1 do -- +1 so that 0xffff actually works
    self.ram[i] = 0
  end

  for i = 1, #rom do
    self.ram[i] = rom[i]
  end
end

function Memory:readCheck(address)
  graphicsValue = graphics:readRegisters(address)

  if graphicsValue ~= nil then
    return graphicsValue
  end

  if runBios then
    if address < 0xff then
      return bios[address]
    end
  end
end

function Memory:writeCheck(address)
  if address == 0xff04 then
    return 0x00 
  end

  return nil 
end

function Memory:read_8b(address)
  checkValue = self:readCheck(address + 1)

  if checkValue ~= nil then
    return checkValue
  end

  return self.ram[address + 1]
end

function Memory:read_16b(address)
  return bitsTo_16b(self:read_8b(address), self:read_8b(address + 1)) -- bitsTo_16b switches the high and low
end

function Memory:writeNoCheck_8b(address, value)
  self.ram[address + 1] = value
  graphics:writeRegisters(address, value)
end

function Memory:write_8b(address, value)
  checkValue = self:writeCheck(address)
  if checkValue ~= nil then
    self.ram[address + 1] = checkValue
  else
    self:writeNoCheck_8b(address, value)
  end
end

function Memory:write_16b(address, value)
  self:write_8b(address, toInt(toBits(value, 8)))
  self:write_8b(address + 1, shiftRight(value, 8))
end


Tile = class()

function Tile:init(number)
  self.number = number
  self.tile = {}
  self:update()
end

function Tile:getTile()
  return self.tile
end

function Tile:draw(x, y)

end

-- Pretend like this is private
function Tile:readTileMemory()
  tile = {}
  for i = 0, 16, 2 do
    tile[i + 1] = {}

    bits = toBits(memory:read_8b(self.number + 1), 8)
    bits2 = toBits(memory:read_8b(self.number + 2), 8)

    for j = 1, #bits, 2 do
      tile[i + 1][j] = (bits2[j] * 2) + bits[j] 
    end
  end

  return tile
end

function Tile:update()
  self.tile = self:readTileMemory() 
end

Sprite = class()

function Sprite:init(number)
  self.number = number
  self.sprite = {}
  self:update()
end

function Sprite:getSprite()
  return self.sprite
end

function Sprite:draw(x, y, xFlip, yFlip, palette)

end

-- I don't understand how a sprite can be 8x16 yet
function Sprite:readSpriteMemory()
  sprite = {}
  for i = 0, 16, 2 do
    sprite[i + 1] = {}

    bits = toBits(memory:read_8b(self.number + 1), 8)
    bits2 = toBits(memory:read_8b(self.number + 2), 8)

    for j = 1, #bits, 2 do
      sprite[i + 1][j] = (bits2[j] * 2) + bits[j] 
    end
  end

  return sprite
end

function Sprite:update()
  self.sprite = self:readSpriteMemory() 
end

SpriteAttribute = class()

function SpriteAttribute:init(address)
  self.address = address
  self:update()
end

function SpriteAttribute:drawSprite()
  self.sprite.draw(self.x, self.y, self.xFlip, self.yFlip, self.palette)
end

function SpriteAttribute:update()
  self.x = memory:read_8b(self.address) 
  self.y = memory:read_8b(self.addres + 1)

  spriteNumber = self:getSpriteNumber(self.address + 2)
  self.sprite = graphics.spriteData[spriteNumber + 1]

  flagBits = toBits(memory:read_8b(self.address + 3))
  self.priority = flagBits[1]
  self.yFlip = flagBits[2] == 1
  self.xFlip = flagBits[3] == 1
  self.palette = flagBits[4]
end

Graphics = class()

function Graphics:init()
  self.lcdDisplay = false
  self.windowTileMapAddress = {0x9800, 0x9bff}
  self.windowDisplay = false
  self.tileDataAddress = {0x8800, 0x97ff}
  self.bgTileMapAddress = {0x9800, 0xbff}
  self.spriteHeight = 8
  self.spriteDisplay = false
  self.bgWindowDisplay = false
  self.scroll = {0, 0} -- X, Y
  self.windowPosition = {0, 0} -- X, Y
  self.bgWinPalette = {0, 0, 0, 0} 
  self.objPalette0 = {0, 0, 0, 0} 
  self.objPalette1 = {0, 0, 0, 0} 
  self.scanLine = 0
  self.compareScanLine = 0
  self.tileData = {}
  self.backgroundTileMap = {}
  self.windowTileMap = {}
  self.spriteData = {}
  self.spriteAttributeData = {}
end

function Graphics:getMapX(address)
  return (32 - ((address - 0x8000) % 32)) + 1
end

function Graphics:getMapY(address)
  return mathFloor((address - 0x8000) / 32) + 1
end

function Graphics:writeRegisters(address, value)
  bValue = toBits(value, 8)

  if address >= 0x8000 and address <= 0x8fff then
    sendMessage("Sprite call!");
    self:updateSprite(address, value)
	elseif address >= 0xfe00 and address <= 0xfe9f then
    sendMessage("Attribute call!");
		self:updateAttributes(address, value)
  elseif address >= self.tileDataAddress[1] and address <= self.tileDataAddress[2] then
    sendMessage("Tile call!");
		self:updateTile(address, value)
  elseif self.bgWindowDisplay == true and address >= self.bgTileMapAddress[1] and address <= self.bgTileMapAddress[2] then -- VRam
    sendMessage("Tile map call!")
    x = self:getMapX(address)
    y = self:getMapY(address)

    if self.titeDataAddress[1] == 0x8000 then -- Unsigned
      self.backgroundTileMap[x][y] = value
    else -- Signed
      signedValue = toBits(value, 8) 
      if bitwiseAnd_8b(value, 0x80) > 0 then
        self.backgroundTileMap[x][y] = signedValue 
      else
        self.backgroundTileMap[x][y] = signedValue + 128
      end
    end
  elseif self.bgWindowDisplay == true and self.windowDisplay == true and address >= self.windowTileMapAddress[1] and address <= self.windowTileMapAddress[2] then
    sendMessage("Window map call!")
    x = self:getMapX(address)
    y = self:getMapY(address)

    if self.titeDataAddress[1] == 0x8000 then -- Unsigned
      self.windowTileMap[x][y] = value
    else -- Signed
      signedValue = toBits(value, 8) 
      if bitwiseAnd_8b(value, 0x80) > 0 then
        self.windowTileMap[x][y] = signedValue 
      else
        self.windowTileMap[x][y] = signedValue + 128
      end
    end
	else
  	if address == 0xff40 then -- LCD Control
  	  self.lcdDisplay = bValue[8] ~= 0
  	  self.windowTileMapAddress = bValue[7] == 1 and {0x9800, 0x9bff} or {0x9c00, 0x9fff}
  	  self.windowDisplay = bValue[6] == 0
  	  self.tileDataAddress = bValue[5] == 0 and {0x8800, 0x97ff} or {0x8000, 0x8fff}
  	  self.bgTileMapAddress = bValue[4] == 0 and {0x9800, 0xbff} or {0x9c00, 0x9fff}
  	  self.spriteHeight = bValue[3] == 0 and 8 or 16
  	  self.spriteDisplay = bValue[2] ~= 0
  	  self.bgWindowDisplay = bValue[1] ~= 0
  	elseif address == 0xff41 then -- LCDC Status

 	  elseif address == 0xff45 then -- LY Compare
   		self.compareScanLine = value
    	stat = memory:read_8b(0xff41)
    	bStat = toBits(stat, 8)
    	if self.compareScanLine == self.scanLine then
      	bStat[3] = 1
    	else
    	  bStat[3] = 0
    	end
  	elseif address == 0xff46 then -- DMA Transfer and Start Address
  	  -- This is unimplemented because this is a function of more complex roms
  	elseif address == 0xff47 then -- BG & Window Palette Data
    	self.bgWinPalette[1] = bValue[1] + (bValue[2] * 2)
    	self.bgWinPalette[2] = bValue[3] + (bValue[4] * 2)
    	self.bgWinPalette[3] = bValue[5] + (bValue[6] * 2)
    	self.bgWinPalette[4] = bValue[7] + (bValue[8] * 2)
  	elseif address == 0xff48 then -- Object Palette 0 Data
    	self.objPalette0[1] = bValue[1] + (bValue[2] * 2)
    	self.objPalette0[2] = bValue[3] + (bValue[4] * 2)
    	self.objPalette0[3] = bValue[5] + (bValue[6] * 2)
    	self.objPalette0[4] = bValue[7] + (bValue[8] * 2)
  	elseif address == 0xff49 then -- Object Palette 1 Data
  	  self.objPalette1[1] = bValue[1] + (bValue[2] * 2)
 	    self.objPalette1[2] = bValue[3] + (bValue[4] * 2)
      self.objPalette1[3] = bValue[5] + (bValue[6] * 2)
    	self.objPalette1[4] = bValue[7] + (bValue[8] * 2)
  	elseif address == 0xff4a then -- Window Y Position
  	  self.windowPosition[2] = value
  	elseif address == 0xff4b then -- Window X Position
    	self.windowPosition[1] = value
  	end
	end
end

function Graphics:readRegisters(address, value)
  if address == 0xff42 then -- Scroll Y
    return self.scroll[2]
  elseif address == 0xff43 then -- Scroll X
    return self.scroll[1]
  elseif address == 0xff44 then -- LCDC Y-Coordinate
    return self.scanLine
  elseif address == 0xff45 then -- LY Compare
    return self.compareScanLine
  elseif address == 0xff4a then -- Window Y Position
    return self.windowPosition[2]
  elseif address == 0xff4b then -- Window X Position
    return self.windowPosition[1]
  end

  return nil
end

function Graphics:getGraphicsNumber(address, startAddress)
  number = mathCeil((address - startAddress) / 16)

	return number 
end

function Graphics:updateTile(address, value)
  tileNumber = self:getGraphicsNumber(address, self.tileDataAddress[1])	
  
  if self.tileData[tileNumber] == nil then
    self.tileData[tileNumber] = Tile(tileNumber)
  else
    self.tileData[tileNumber]:update()
  end
end

function Graphics:updateSprite(address, value)
  spriteNumber = self:getGraphicsNumber(address, 0x8000)
  
  if self.spriteData[spriteNumber] == nil then
    self.spriteData[spriteNumber] = Sprite(spriteNumber)
  else
    self.spriteData[spriteNumber]:update()
  end
end

function Graphics:updateAttributes(address, value)
  attributeNumber = self:getGraphicsNumber(address, 0xfe00)

  if self.spriteAttributeData[attributeNumber] == nil then
    self.spriteAtrributeData[attributeNumber] = SpriteAttribute(address)
  else
    self.spriteAtrributeData[attributeNumber].update()
  end
end


-- color = {red, gree, blue}
function drawPixel(gc, x, y, color)
	gc:setColorRGB(color[1], color[2], color[3])
	gc:drawRect(x, y, 1, 1) -- Guessing on the most efficient way to draw a pixel
end

function testDraw(gc)
  color = {0, 255, 0}
  drawPixel(gc, 5, 50, color)	

	color = {255, 0, 0} 
	for x = 10, 50 do
		for y = 50, 90 do
			drawPixel(gc, x, y, color)	
		end
	end
end

function sendMessage(message)
  displayedMessage = message
  timesMessageDisplayed = 0
  print(message)
end

function drawMessage(gc)
  timesMessageDisplayed = timesMessageDisplayed + 1

  if timesMessageDisplayed < 25 then
    gc:drawString(displayedMessage, 2, 170)
  else
    displayedMessage = ""
    timesMessageDisplayed = 0
  end
end


Button = class()

function Button:init(character)
  self.character = character
  self.pressed = false
  self.interruptStatus = false
end

function Button:checkInterrupt()
  if self.interruptStatus then
    self.interruptStatus = false
    return true
  end
  
  return false
end

function Button:check(pressedButton)
  if pressedButton == self.character then
    self:press()
  else
    self:release()
  end
end

function Button:press()
  self.pressed = true
  self.interruptStatus = true
  sendMessage("Press: " .. self.character)
end

function Button:release()
  if self.pressed then
    self.pressed = false
    self.interruptStatus = true
    sendMessage("Release: " .. self.character)
  end
end


Debugger = class()

function Debugger:init()
  self.command = ""
  self.error = "Type a command:"
  -- Mode: 0 = None, 1 = Normal, 2 = Debug
  self.mode = 0
  self.render = "" 
  self.step = false
  self.address = -1
  self.stopOn = "Completely random string"
end

function Debugger:setCommand(value)
  self.command = value
end

function Debugger:checkStopOn(opcode)
  lowerOpcode = string.lower(opcode)
  if lowerOpcode:find(self.stopOn) ~= nil then
    stop = true
  end
end

function Debugger:check()
  self:clear()
  opcode = string.lower(self.command)

  if opcode == "start" or command == "start normal" then
    self:startCommand(1) 
  elseif opcode == "start debug" then 
    self:startCommand(2)
  elseif opcode == "step" or opcode == "s" then
    self:stepCommand()
  elseif opcode == "registers" then
    self:registersCommand()
  elseif opcode == "flags" then
    self:flagsCommand()
  elseif opcode:match("%memory") then
    self:memoryCommand(opcode)
  elseif opcode:match("until") then
    self:untilCommand(opcode )
  elseif opcode == "help" then
    self:helpCommand()
  else
    self.error = "Unknown command '" .. opcode .. "'. Try 'help'"
  end

  self.command = ""
end

function Debugger:renderText(gc, opcode)
  if self.mode == 0 or self.mode == 2 then
    gc:drawString("Mode " .. self.mode, 2, 0)

    if self.render == "HELP" then
      self:renderHelp(gc)
    elseif self.render == "REGISTERS" then
      self:renderRegisters(gc)
    elseif self.render == "FLAGS" then
      self:renderFlags(gc)
    elseif self.address ~= -1 then
      self:renderMemory(gc)
    end

    if self.mode == 2 and self.render ~= "HELP" then
      gc:drawString(pcHex .. ": " ..  opcode, 2, 30)
    end

    gc:drawString(self.error, 2, 170)
    gc:drawString(self.command, 2, 190)
  end 
end

function Debugger:clear()
  self.error = "Type a command:"
  self.render = ""
  self.address = -1
end

function Debugger:memoryCommand(command)
  self.address = split(command, " ")
  self.address = tonumber(self.address[2], 16)
end

function Debugger:untilCommand(command)
  self.stopOn = split(command, " ")
  self.stopOn = self.stopOn[2]
  stop = false
end

function Debugger:flagsCommand()
  self.render = "FLAGS"
end

function Debugger:registersCommand()
  self.render = "REGISTERS"
end

function Debugger:stepCommand()
  self.step = true
  stop = false
end

function Debugger:helpCommand()
  render = "HELP"
end

function Debugger:startCommand(input)
  self.mode = input

  if input == 1 then
    self:clear()
    stop = false
    self.stepping = false
  elseif input == 2 then
    stop = true
  end
end

function Debugger:renderMemory(gc)
  gc:drawString(toHex(self.address) .. ": " .. toHex(memory:read_8b(self.address)), 2, 50)
end

function Debugger:renderFlags(gc)
  gc:drawString("Zero " .. tostring(zeroFlag:isSet()), 2, 50)
  gc:drawString("Subtract " .. tostring(subtractFlag:isSet()), 2, 70)
  gc:drawString("Half Carry " .. tostring(halfCarryFlag:isSet()), 2, 90)
  gc:drawString("Carry " .. tostring(carryFlag:isSet()), 2, 110)
end

function Debugger:renderRegisters(gc)
    gc:drawString("A: " .. toHex(registers[1]) .. " B: " .. toHex(registers[2]) .. " C: " .. toHex(registers[3]) .. " D: " .. toHex(registers[4]), 2, 50)
    gc:drawString("E: " .. toHex(registers[5]) .. " F: " .. toHex(registers[8]) .. " H: " .. toHex(registers[6]) .. " L: " .. toHex(registers[7]) .. " SP: " .. toHex(registers[9]), 2, 70)
end

function Debugger:renderHelp(gc)
  gc:drawString("Commands:", 2, 20)
  gc:drawString("'start [MODE]' - Starts in specified mode", 2, 40)
  gc:drawString("    Modes: 'normal' or 'debug'", 2, 60)

  gc:drawString("'registers' - Show register values", 2, 80)
  gc:drawString("'memory [ADDRESS]' - Show the value stored", 2, 100) 
  gc:drawString("    in specified address", 2, 120)
  gc:drawString("'until [OPCODE]' Run until specified opcode", 2, 140)
end


function eAssert(functionName, variable, variableName, expectedType)
  message = functionName .. " expects " .. variableName .. " to be both a " .. expectedType .. " and non-nil"

  isNil = variable == nil
  isType = type(variable) ~= expectedType

  if isType then
    message = message .. ", but " .. variableName .. " is a " .. type(variable)
    assert(false, message)
  elseif isNil then
    message = message .. ", but " .. variableName .. " is nil"
    assert(false, message)
  end
end

function setFlags(z, s, hc, c)
  flag = toBits(registers[8], 8)

  if z ~= nil then
    if z then zeroFlag:set() else zeroFlag:reset() end
    flag[8] = zeroFlag:toBit()
  end

  if s ~= nil then
    if z then subtractFlag:set() else subtractFlag:reset() end
    flag[7] = subtractFlag:toBit()
  end

  if hc ~= nil then
    if z then halfCarryFlag:set() else halfCarryFlag:reset() end
    flag[6] = halfCarryFlag:toBit()
  end

  if c ~= nil then
    if z then carryFlag:set() else carryFlag:reset() end
    flag[5] = carryFlag:toBit()
  end

  registers[8] = toInt(flag)
end

function writeRegister_16b(rIndex1, rIndex2, num)
  eAssert("writeRegister_16b", rIndex1, "rIndex1", "number")
  eAssert("writeRegister_16b", rIndex2, "rIndex2", "number")
  eAssert("writeRegister_16b", num, "num", "number")

  registers[rIndex1] = toInt(toBits(num, 8))
  registers[rIndex2] = shiftRight(num, 8)
end

function getRegister_16b(first)
  eAssert("getRegister_16b", first, "first", "number")

  return bitsTo_16b(registers[first], registers[first + 1])
end

function bitsTo_16b(low, high)
  eAssert("bitsTo_16b", low, "low", "number")
  eAssert("bitsTo_16b", high, "high", "number")

  return shiftLeft(high, 8) + low
end

function mask_8b(number)
  eAssert("mask_8b", number, "number", "number")

  return toInt(toBits(number, 8)) 
end

function mask_16b(number)
  eAssert("mask_16b", number, "number", "number")

  return toInt(toBits(number, 16))
end

-- From http://stackoverflow.com/questions/1426954/split-string-in-lua by user973713 (second answer) but slightly modified
function split(inputstr, sep)
  eAssert("split", inputstr, "inputstr", "string")
  eAssert("split", sep, "sep", "string")

  if sep == nil then
    sep = "%s"
  end
  local t={} ; i=1
  for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
    t[i] = str
    i = i + 1
  end
  return t
end


-- {A, B, C, D, E, H, L, F, SP} 
registers = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}

-- Flags (Must be manually placed in register F)
zeroFlag = ZeroFlag(false)
subtractFlag = SubtractFlag(false)
carryFlag = CarryFlag(false)
halfCarryFlag = HalfCarryFlag(false)

ime = false 

speedScaler = 0.5 -- Smallest time in Lua is millisecond so everything will run half speed (this can be changed to be faster in the futer)

stop = false
halt = false

-- Interrupts
vBlankInterrupt = Interrupt({check = vBlankCheck, run = vBlankRun, fail = vBlankFail, variable = 0}, 0x40, 0x1)
scanLineInterrupt = Interrupt({check = scanLineCheck}, 0x48, 0x2)
timerOverflowInterrupt = Interrupt({check = timerOverflowCheck, run = timerOverflowRun}, 0x50, 0x2)
-- No Serial Transfer Completion because this will never be implemented
keyBounceInterrupt = Interrupt({}, 0x60, 0x3)
interruptArray = {vBlankInterrupt, scanLineInterrupt, timerOverflowInterrupt, keyBounceInterrupt}

timerSpeed = 4 -- 4096 * 0.001 and truncate

buttons = {aButton = Button("9"), bButton = Button("6"), upButton = Button("Up"), downButton = Button("Down"), rightButton = Button("Right"), leftButton = Button("Left")}

graphics = Graphics()

-- Program Counter
pc = 0x1 -- Start of rom is be 0x101 but the start of the bios is 0x105
pcHex = 0x00

c = 0 -- The amount of clock cycles until the next command is run

debugger = Debugger()
displayedMessage = ""
timesMessageDisplayed = 0

memory = Memory(rom)
runBios = true -- Start bios on startup

rom = nil
collectgarbage() -- Deallocate rom


-- Opcodes
-- Each command has a corresponding "base" command to reduce reptition 
-- Each Base command takes many different arugments. A few of these include:
--   rIndex (rIndex1, rIndex2) - These correspond with register numbers (register numbers avaible in header.lua)
--   n, nn, b - These parameters correspond with the letters given in their command documentation (found in http://marc.rawer.de/Gameboy/Docs/GBCPUman.pdf). These will vary.
--   store - This parameter indicates if the result should be stored in memory. rIndex is interperated as the start to a 16 bit register (6 = HL or 6 + 7). This is only used in commands that involve HL

-- 8-Bit Loads

function ld_8b (rIndex, n)
  eAssert("ld_8b", rIndex, "rIndex", "number")
  eAssert("ld_8b", n, "n", "number")

  registers[rIndex] = n
end

-- 0x06
function LD_B_n (n)
  ld_8b(2, n)
end

-- 0x0e
function LD_C_n (n)
  ld_8b(3, n)
end

-- 0x16
function LD_D_n (n)
  ld_8b(4, n)
end

-- 0x1e
function LD_E_n (n)
  ld_8b(5, n)
end

-- 0x26
function LD_H_n (n)
  ld_8b(6, n)
end

-- 0x2e
function LD_L_n (n)
  ld_8b(7, n)
end

-- 0x7f
function LD_A_A ()
  ld_8b(1, registers[1])
end

-- 0x78
function LD_A_B ()
  ld_8b(1, registers[2])
end

-- 0x79
function LD_A_C ()
  ld_8b(1, registers[3])
end

-- 0x7a
function LD_A_D ()
  ld_8b(1, registers[4])
end

-- 0x7b
function LD_A_E ()
  ld_8b(1, registers[5])
end

-- 0x7c
function LD_A_H ()
  ld_8b(1, registers[6])
end

-- 0x7d
function LD_A_L ()
  ld_8b(1, registers[7])
end

-- 0x7e
function LD_A_HL ()
  ld_8b(1, memory:read_8b(getRegister_16b(6)))
end

-- 0x40
function LD_B_B ()
  ld_8b(2, registers[2])
end

-- 0x41
function LD_B_C ()
  ld_8b(2, registers[3])
end

-- 0x42
function LD_B_D ()
  ld_8b(2, registers[4])
end

-- 0x43
function LD_B_E ()
  ld_8b(2, registers[5])
end

-- 0x44
function LD_B_H ()
  ld_8b(2, registers[6])
end

-- 0x45
function LD_B_L ()
  ld_8b(2, registers[7])
end

-- 0x46
function LD_B_HL ()
  ld_8b(2, memory:read_8b(getRegister_16b(6)))
end

-- 0x48
function LD_C_B ()
  ld_8b(3, registers[2])
end

-- 0x49
function LD_C_C ()
  ld_8b(3, registers[3])
end

-- 0x4a
function LD_C_D ()
  ld_8b(3, registers[4])
end

-- 0x4b
function LD_C_E ()
  ld_8b(3, registers[5])
end

-- 0x4c
function LD_C_H ()
  ld_8b(3, registers[6])
end

-- 0x4d
function LD_C_L ()
  ld_8b(3, registers[7])
end

-- 0x4e
function LD_C_HL ()
  ld_8b(3, memory:read_8b(getRegister_16b(6)))
end

-- 0x50
function LD_D_B ()
  ld_8b(4, registers[2])
end

-- 0x51
function LD_D_C ()
  ld_8b(4, registers[3])
end

-- 0x52
function LD_D_D ()
  ld_8b(4, registers[4])
end

-- 0x53
function LD_D_E ()
  ld_8b(4, registers[5])
end

-- 0x54
function LD_D_H ()
  ld_8b(4, registers[6])
end

-- 0x55
function LD_D_L ()
  ld_8b(4, registers[7])
end

-- 0x56
function LD_D_HL ()
  ld_8b(4, memory:read_8b(getRegister_16b(6)))
end

-- 0x58
function LD_E_B ()
  ld_8b(5, registers[2])
end

-- 0x59
function LD_E_C ()
  ld_8b(5, registers[3])
end

-- 0x5a
function LD_E_D ()
  ld_8b(5, registers[4])
end

-- 0x5b
function LD_E_E ()
  ld_8b(5, registers[5])
end

-- 0x5c
function LD_E_H ()
  ld_8b(5, registers[6])
end

-- 0x5d
function LD_E_L ()
  ld_8b(5, registers[7])
end

-- 0x5e
function LD_E_HL ()
  ld_8b(5, memory:read_8b(getRegister_16b(6)))
end

-- 0x60
function LD_H_B ()
  ld_8b(6, registers[2])
end

-- 0x61
function LD_H_C ()
  ld_8b(6, registers[3])
end

-- 0x62
function LD_H_D ()
  ld_8b(6, registers[4])
end

-- 0x63
function LD_H_E ()
  ld_8b(6, registers[5])
end

-- 0x64
function LD_H_H ()
  ld_8b(6, registers[6])
end

-- 0x65
function LD_H_L ()
  ld_8b(6, registers[7])
end

-- 0x66
function LD_H_HL ()
  ld_8b(6, memory:read_8b(getRegister_16b(6)))
end

-- 0x68
function LD_L_B ()
  ld_8b(7, registers[2])
end

-- 0x69
function LD_L_C ()
  ld_8b(7, registers[3])
end

-- 0x6a
function LD_L_D ()
  ld_8b(7, registers[4])
end

-- 0x6b
function LD_L_E ()
  ld_8b(7, registers[5])
end

-- 0x6c
function LD_L_H ()
  ld_8b(7, registers[6])
end

-- 0x6d
function LD_L_L ()
  ld_8b(7, registers[7])
end

-- 0x6e
function LD_L_HL ()
  ld_8b(7, memory:read_8b(getRegister_16b(6)))
end

function ldMemory_8b (rIndex, value)
  eAssert("ldMemory_8b", rIndex, "rIndex", "number")
  eAssert("ldMemory_8b", value, "value", "number")

  memory:write_8b(getRegister_16b(rIndex), value)
end

-- 0x70
function LD_HL_B ()
  ldMemory_8b(6, registers[2])
end

-- 0x71
function LD_HL_C ()
  ldMemory_8b(6, registers[3])
end

-- 0x72
function LD_HL_D ()
  ldMemory_8b(6, registers[4])
end

-- 0x73
function LD_HL_E ()
  ldMemory_8b(6, registers[5])
end

-- 0x74
function LD_HL_H ()
  ldMemory_8b(6, registers[6])
end

-- 0x75
function LD_HL_L ()
  ldMemory_8b(6, registers[7])
end

-- 0x36
function LD_HL_n (n)
  ldMemory_8b(6, n)
end

-- 0x0a
function LD_A_BC ()
  ld_8b(1, memory:read_8b(getRegister_16b(2)))
end

-- 0x1a
function LD_A_DE ()
  ld_8b(1, memory:read_8b(getRegister_16b(4)))
end

-- 0xfa
function LD_A_nn (nn)
  ld_8b(1, memory:read_8b(nn))
end

-- 0x3e
function LD_A_n (n)
  ld_8b(1, n)
end

-- 0x47
function LD_B_A ()
  ld_8b(2, registers[1])
end

-- 0x4f
function LD_C_A ()
  ld_8b(3, registers[1])
end

-- 0x57
function LD_D_A ()
  ld_8b(4, registers[1])
end

-- 0x5f
function LD_E_A ()
  ld_8b(5, registers[1])
end

-- 0x67
function LD_H_A ()
  ld_8b(6, registers[1])
end

-- 0x6f
function LD_L_A ()
  ld_8b(7, registers[1])
end

-- 0x02
function LD_BC_A ()
  ldMemory_8b(2, registers[1])
end

-- 0x12
function LD_DE_A ()
  ldMemory_8b(4, registers[1])
end

-- 0x77
function LD_HL_A ()
  ldMemory_8b(6, registers[1])
end

-- 0xea
function LD_nn_A (nn)
  ld_8b(memory:read_8b(nn), registers[1])
end

-- 0xf2
function LD_A_iC ()
  ld_8b(1, memory:read_8b(0xff00 + registers[3]))
end

-- 0xe2
function LD_iC_A ()
  memory:write_8b(0xff00 + registers[3], registers[1])
end

-- 0x3a
function LDD_A_HL ()
  LD_A_HL()
  DEC_HL()
end

-- 0x32
function LDD_HL_A ()
  LD_HL_A()
  DEC_HL()
end

-- 0x2a
function LDI_A_HL ()
  LD_A_HL()
  INC_HL()
end

-- 0x22
function LDI_HL_A ()
  LD_HL_A()
  INC_HL()
end

-- 0xe0
function LDH_in_A (n)
  eAssert("LDH_in_A", n, "n", "number")
  
  memory:write_8b(0xff00 + n, registers[1])
end

-- 0xf0
function LDH_A_in (n)
  eAssert("LDH_A_in", n, "n", "number")

  registers[1] = memory:read_8b(0xff00 + n)
end

-- 16-Bit Loads

function ld_16b (rIndex, nn)
  eAssert("ld_16b", rIndex, "rIndex", "number")
  eAssert("ld_16b", nn, "nn", "number")

  writeRegister_16b(rIndex, rIndex + 1, nn)
end

-- 0x01
function LD_BC_nn (nn)
  ld_16b(2, nn)
end

-- 0x11
function LD_DE_nn (nn)
  ld_16b(4, nn)
end

-- 0x21
function LD_HL_nn (nn)
  ld_16b(6, nn)
end

-- 0x31
function LD_SP_nn (nn)
  eAssert("LD_SP_nn", nn, "nn", "number")

  registers[9] = nn
end

-- 0xf9
function LD_SP_HL ()
  registers[9] = getRegister_16b(6)
end

-- 0xf8
function LDHL_SP_n (n)
  eAssert("LDHL_SP_n", n, "n", "number")

  writeRegister_16b(6, 7, registers[9] + n)
  setFlags(false, false, false, false) -- The documentation on this command's flags is a bit weird
end

-- 0x08
function LD_nn_SP (nn)
  eAssert("LD_nn_SP", nn, "nn", "number")

  memory:write_16b(nn, registers[9])
end

function push (nn)
  eAssert("push", nn, "nn", "number")

  registers[9] = registers[9] - 2
  memory:write_16b(registers[9], nn)
end

-- 0xf5
function PUSH_AF ()
  push(bitsTo_16b(registers[1], registers[8]))
end

-- 0xc5
function PUSH_BC ()
  push(getRegister_16b(2))
end

-- 0xd5
function PUSH_DE ()
  push(getRegister_16b(4))
end

-- 0xe5
function PUSH_HL ()
  push(getRegister_16b(6))
end

function pop (rIndex1, rIndex2)
  eAssert("pop", rIndex1, "rIndex1", "number")
  eAssert("pop", rIndex2, "rIndex2", "number")

  registers[rIndex1] = memory:read_8b(registers[9] + 1)
  registers[rIndex2] = memory:read_8b(registers[9])
  memory:write_16b(registers[9], 0) -- Clear popped memory
  registers[9] = registers[9] + 2
end

-- 0xf1
function POP_AF ()
  pop(1, 8)
end

-- 0xc1
function POP_BC ()
  pop(2, 3)
end

-- 0xd1
function POP_DE ()
  pop(4, 5)
end

-- 0xe1
function POP_HL ()
  pop(6, 7)
end

-- 8-Bit ALU

function add_8b (rIndex, nn)
  eAssert("add_8b", rIndex, "rIndex", "number")
  eAssert("add_8b", nn, "nn", "number")

  sum = registers[rIndex] + nn

  registers[rIndex] = mask_8(sum)
  setFlags(zeroFlag:isZero(sum), false, halfCarryFlag:isHalfCarryAdd_8b(registers[rIndex], nn), carryFlag:isCarryHigh_8b(sum))
end

-- 0x87
function ADD_A_A ()
  add_8b(1, registers[1])
end

-- 0x80
function ADD_A_B ()
  add_8b(1, registers[2])
end

-- 0x81
function ADD_A_C ()
  add_8b(1, registers[3])
end

-- 0x82
function ADD_A_D ()
  add_8b(1, registers[4])
end

-- 0x83
function ADD_A_E ()
  add_8b(1, registers[5])
end

-- 0x84
function ADD_A_H ()
  add_8b(1, registers[6])
end

-- 0x85
function ADD_A_L ()
  add_8b(1, registers[7])
end

-- 0x86
function ADD_A_HL ()
  add_8b(1, memory:read_8b(getRegister_16b(6)))
end

-- 0xc6
function ADD_A_n (n)
  add_8b(1, n)
end

function adc_8b (rIndex, nn)
  eAssert("adc_8b", rIndex, "rIndex", "number")
  eAssert("adc_8b", nn, "nn", "number")

  carry = carryFlag:isSet() and 1 or 0
  add_8b(rIndex, nn + carry)
end

-- 0x8f
function ADC_A_A ()
  adc_8b(1, registers[1])
end

-- 0x88
function ADC_A_B ()
  adc_8b(1, registers[2])
end

-- 0x89
function ADC_A_C ()
  adc_8b(1, registers[3])
end

-- 0x8a
function ADC_A_D ()
  adc_8b(1, registers[4])
end

-- 0x8b
function ADC_A_E ()
  adc_8b(1, registers[5])
end

-- 0x8c
function ADC_A_H ()
  adc_8b(1, registers[6])
end

-- 0x8d
function ADC_A_L ()
  adc_8b(1, registers[7])
end

-- 0x8e
function ADC_A_HL ()
  adc_8b(1, memory:read_8b(getRegister_16b(6)))
end

-- 0xce
function ADC_A_n (n)
  adc_8b(1, n)
end

function sub_8b (rIndex, n)
  eAssert("sub_8b", rIndex, "rIndex", "number")
  eAssert("sub_8b", n, "n", "number")

  diff = registers[rIndex] - n
  registers[rIndex] = diff
  setFlags(zeroFlag:isZero(diff), true, halfCarryFlag:isHalfCarrySub_8b(registers[rIndex], n), carryFlag:isCarryLow(diff))
end

-- 0x97
function SUB_A ()
  sub_8b(1, registers[1])
end

-- 0x90
function SUB_B ()
  sub_8b(1, registers[2])
end

-- 0x91
function SUB_C ()
  sub_8b(1, registers[3])
end

-- 0x92
function SUB_D ()
  sub_8b(1, registers[4])
end

-- 0x93
function SUB_E ()
  sub_8b(1, registers[5])
end

-- 0x94
function SUB_H ()
  sub_8b(1, registers[6])
end

-- 0x95
function SUB_L ()
  sub_8b(1, registers[7])
end

-- 0x96
function SUB_HL ()
  sub_8b(1, memory:read_8b(getRegister_16b(6)))
end

-- 0xd6
function SUB_n (n)
  sub_8b(1, n)
end

function sbc_8b (rIndex, n)
  eAssert("sbc_8b", rIndex, "rIndex", "number")
  eAssert("sbc_8b", n, "n", "number")

  carry = carryFlag:isSet() and 1 or 0
  sub_8b(rIndex, n + carry)
end

-- 0x9f
function SBC_A_A ()
  sbc_8b(1, registers[1])
end

-- 0x98
function SBC_A_B ()
  sbc_8b(1, registers[2])
end

-- 0x99
function SBC_A_C ()
  sbc_8b(1, registers[3])
end

-- 0x9a
function SBC_A_D ()
  sbc_8b(1, registers[4])
end

-- 0x9b
function SBC_A_E ()
  sbc_8b(1, registers[5])
end

-- 0x9c
function SBC_A_H ()
  sbc_8b(1, registers[6])
end

-- 0x9d
function SBC_A_L ()
  sbc_8b(1, registers[7])
end

-- 0x9e
function SBC_A_HL ()
  sbc_8b(1, memory:read_8b(getRegister_16b(6)))
end

-- 0xde
function SBC_A_n (n)
  sbc_8b(1, n)
end

function and_8b (n)
  eAssert("and_8b", n, "n", "number")

  registers[1] = bitwiseAnd_8b(registers[1], n)
  setFlags(zeroFlag:isZero(registers[1]), false, true, false)
end

-- 0xa7
function AND_A ()
  and_8b(registers[1])
end

-- 0xa0
function AND_B ()
  and_8b(registers[2])
end

-- 0xa1
function AND_C ()
  and_8b(registers[3])
end

-- 0xa2
function AND_D ()
  and_8b(registers[4])
end

-- 0xa3
function AND_E ()
  and_8b(registers[5])
end

-- 0xa4
function AND_H ()
  and_8b(registers[6])
end

-- 0xa5
function AND_L ()
  and_8b(registers[7])
end

-- 0xa6
function AND_HL ()
  and_8b(memory:read_8b(getRegister_16b(6)))
end

-- 0xe6
function AND_n (n)
  and_8b(n)
end

function or_8b (n)
  eAssert("or_8b", n, "n", "number")

  registers[1] = bitwiseOr_8b(registers[1], n)
  setFlags(zeroFlag:isZero(registers[1]), false, false, false)
end

-- 0xb7
function OR_A ()
  or_8b(registers[1])
end

-- 0xb0
function OR_B ()
  or_8b(registers[2])
end

-- 0xb1
function OR_C ()
  or_8b(registers[3])
end

-- 0xb2
function OR_D ()
  or_8b(registers[4])
end

-- 0xb3
function OR_E ()
  or_8b(registers[5])
end

-- 0xb4
function OR_H ()
  or_8b(registers[6])
end

-- 0xb5
function OR_L ()
  or_8b(registers[7])
end

-- 0xb6
function OR_HL ()
  or_8b(memory:read_8b(getRegister_16b(6)))
end

-- 0xf6
function OR_n (n)
  or_8b(n)
end

function xor_8b (n)
  eAssert("xor_8b", n, "n", "number")

  registers[1] = bitwiseXor_8b(registers[1], n)
  setFlags(zeroFlag:isZero(registers[1]), false, false, false)
end

-- 0xaf
function XOR_A ()
  xor_8b(registers[1])
end

-- 0xa8
function XOR_B ()
  xor_8b(registers[2])
end

-- 0xa9
function XOR_C ()
  xor_8b(registers[3])
end

-- 0xaa
function XOR_D ()
  xor_8b(registers[4])
end

-- 0xab
function XOR_E ()
  xor_8b(registers[5])
end

-- 0xac
function XOR_H ()
  xor_8b(registers[6])
end

-- 0xad
function XOR_L ()
  xor_8b(registers[7])
end

-- 0xae
function XOR_HL ()
  xor_8b(memory:read_8b(getRegister_16b(6)))
end

-- 0xee
function XOR_n (n)
  xor_8b(n)
end

function cp (n)
  eAssert("cp", n, "n", "number")

  compare = registers[1] - n

  setFlags(zeroFlag:isZero(compare), true, halfCarryFlag:isHalfCarrySub_8b(registers[1], n), (registers[1] < n))
end

-- 0xbf
function CP_A ()
  cp(registers[1])
end

-- 0xb8
function CP_B ()
  cp(registers[2])
end

-- 0xb9
function CP_C ()
  cp(registers[3])
end

-- 0xba
function CP_D ()
  cp(registers[4])
end

-- 0xbb
function CP_E ()
  cp(registers[5])
end

-- 0xbc
function CP_H ()
  cp(registers[6])
end

-- 0xbd
function CP_L ()
  cp(registers[7])
end

-- 0xbe
function CP_HL ()
  cp(memory:read_8b(getRegister_16b(6)))
end

-- 0xfe
function CP_n (n)
  cp(n)
end

function inc_8b (rIndex, store)
  eAssert("inc_8b", rIndex, "rIndex", "number")
  eAssert("inc_8b", store, "store", "boolean")

  startValue = store and registers[rIndex] or memory:read_8b(getRegister_16b(rIndex))
  sum = mask_8b(startValue + 1)

  if store then
    registers[rIndex] = sum
  else
    memory:write_8b(getRegister_16b(rIndex), sum)
  end

  setFlags(zeroFlag:isZero(sum), false, halfCarryFlag:isHalfCarryAdd_8b(sum, 1), nil)
end

-- 0x3c
function INC_A ()
  inc_8b(1, false)
end

-- 0x04
function INC_B ()
  inc_8b(2, false)
end

-- 0x0c
function INC_C ()
  inc_8b(3, false)
end

-- 0x14
function INC_D ()
  inc_8b(4, false)
end

-- 0x1c
function INC_E ()
  inc_8b(5, false)
end

-- 0x24
function INC_H ()
  inc_8b(6, false)
end

-- 0x2c
function INC_L ()
  inc_8b(7, false)
end

-- 0x34
function INC_HL ()
  inc_8b(6, true)
end

function dec_8b (rIndex, store)
  eAssert("dec_8b", rIndex, "rIndex", "number")
  eAssert("dec_8b", store, "store", "boolean")

  startValue = store and registers[rIndex] or memory:read_8b(getRegister_16b(rIndex))
  diff = mask_8b(startValue - 1)

  if n == nil then
    registers[rIndex] = diff
  else
    memory:write_8b(getRegister_16b(rIndex), diff)
  end
  
  setFlags(zeroFlag:isZero(diff), true, halfCarryFlag:isHalfCarrySub_8b(startValue, 1), nil)
end

-- 0x3d
function DEC_A ()
  dec_8b(1, false)
end

-- 0x05
function DEC_B ()
  dec_8b(2, false)
end

-- 0x0d
function DEC_C ()
  dec_8b(3, false)
end

-- 0x15
function DEC_D ()
  dec_8b(4, false)
end

-- 0x1d
function DEC_E ()
  dec_8b(5, false)
end

-- 0x25
function DEC_H ()
  dec_8b(6, false)
end

-- 0x2d
function DEC_L ()
  dec_8b(7, false)
end

-- 0x35
function DEC_HL ()
  dec_8b(6, true)
end

-- 16-Bit Arithmetic

function add_16b (rIndex1, rIndex2, nn)
  eAssert("add_16b", rIndex1, "rIndex1", "number")
  --eAssert("add_16b", rIndex2, "rIndex2", "number") No assertion because this can be nil. This is temporary
  eAssert("add_16b", nn, "nn", "number")

  if rIndex2 ~= nil then
    sum = getRegister_16b(rIndex1) + nn

    writeRegister_16b(rIndex1, rIndex2, mask_16b(sum))
    setFlags(nil, false, halfCarryFlag:isHalfCarryAdd_16b(getRegister_16b(rIndex1), nn), carryFlag:isCarryHigh_16b(sum))
  else
    sum = registers[rIndex1] + nn

    registers[rIndex1] = mask_16b(sum)
    setFlags(false, false, halfCarryFlag:isHalfCarryAdd_16b(shiftRight(registers[rIndex1], 8), toInt(toBits(nn, 8))), carryFlag:isCarryHigh_16b(sum))
  end
end

-- 0x09
function ADD_HL_BC ()
  add_16b(6, 7, getRegister_16b(2))
end

-- 0x19
function ADD_HL_DE ()
  add_16b(6, 7, getRegister_16b(4))
end

-- 0x29
function ADD_HL_HL ()
  add_16b(6, 7, getRegister_16b(6))
end

-- 0x39
function ADD_HL_SP ()
  add_16b(6, 7, registers[9])
end

-- 0xe8
function ADD_SP_n (n)
  add_16b(9, nil, n)
end

function inc_16b (rIndex1, rIndex2)
  eAssert("inc_16b", rIndex1, "rIndex1", "number")
  --eAssert("inc_16b", rIndex2, "rIndex2", "number") No assertion because this can be nil. This is temporary
  --eAssert("inc_16b", nn, "nn", "number") No assertion because this can be nil. This is temporary

  if rIndex2 ~= nil then
    sum = getRegister_16b(rIndex1) + 1

    writeRegister_16b(rIndex1, rIndex2, mask_16b(sum))
  else
    sum = registers[rIndex1] + 1

    registers[8] = mask_16b(sum)
  end
end

-- 0x03
function INC_BC ()
  inc_16b(2, 3)
end

-- 0x13
function INC_DE ()
  inc_16b(4, 5)
end

-- 0x23
function INC_HL ()
  inc_16b(6, 7)
end

-- 0x33
function INC_SP ()
  inc_16b(9, nil)
end

function dec_16b (rIndex1, rIndex2)
  eAssert("dec_16b", rIndex1, "rIndex1", "number")
  --eAssert("dec_16b", rIndex2, "rIndex2", "number") No assertion because this can be nil. This is temporary
  --eAssert("dec_16b", nn, "nn", "number") No assertion because this can be nil. This is temporary

  if rIndex2 ~= nil then
    sum = getRegister_16b(rIndex1) - 1

    writeRegister_16b(rIndex1, rIndex2, mask_16b(sum))
  else
    sum = registers[rIndex1] - 1

    registers[8] = mask_16b(sum)
  end
end

-- 0x0b
function DEC_BC ()
  dec_16b(2, 3)
end

-- 0x1b
function DEC_DE ()
  dec_16b(4, 5)
end

-- 0x2b
function DEC_HL ()
  dec_16b(6, 7)
end

-- 0x3b
function DEC_SP ()
  dec_16b(9, nil)
end

-- Miscellaneous

function swap (rIndex, store)
  eAssert("swap", rIndex, "rIndex", "number")
  eAssert("swap", store, "store", "boolean")

  startValue = store and registers[rIndex] or memory:read_8b(getRegister_16b(rIndex))
  byte = shiftRight(startValue, 4) + (shiftLeft(bitwiseAnd_8b(startValue, 0xf0), 4))

  if not store then
    registers[rIndex] = byte
  else
    memory:write_8b(getRegister_16b(rIndex), byte)
  end

  setFlags(zeroFlag:isZero(byte), false, false, false)
end

-- 0xCB 0x37
function SWAP_A ()
  swap(1, false)
end

-- 0xCB 0x30
function SWAP_B ()
  swap(2, false)
end

-- 0xCB 0x31
function SWAP_C ()
  swap(3, false)
end

-- 0xCB 0x32
function SWAP_D ()
  swap(4, false)
end

-- 0xCB 0x33
function SWAP_E ()
  swap(5, false)
end

-- 0xCB 0x34
function SWAP_H ()
  swap(6, false)
end

-- 0xCB 0x35
function SWAP_L ()
  swap(7, false)
end

-- 0xCB 0x30
function SWAP_HL ()
  swap(6, true)
end

-- 0x27
-- Explanation of command provided from http://stackoverflow.com/questions/8119577/z80-daa-instruction (3rd answer)
function DAA ()
  if bitwiseAnd_8b(registers[1], 0x0f) > 9 or halfCarryFlag:isSet() then
    registers[1] = registers[1] + 0x06
  end

  if shiftRight(registers[1], 4) > 9 or carryFlag:isSet() then
    registers[1] = registers[1] + 0x60
  end
end

-- 0x2f
function CPL ()
  registers[1] = bitwiseNegate_8b(registers[1])
end

-- 0x3f
function CCF ()
  if carryFlag:isSet() then
    setFlags(nil, nil, nil, false)
  else
    setFlags(nil, nil, nil, true)
  end
end

-- 0x37
function SCF ()
  setFlags(nil, nil, nil, true)
end

-- 0x00
function NOP ()
-- NOP does nothing  
end

-- 0x76
function HALT ()
  halt = true
end

-- 0x10
function STOP ()
  stop = true
  lcdDisplay = false
end

-- 0xf3
function DI ()
  ime = false
end

-- 0xfb
function EI ()
  ime = true
end

-- Rotates & Shifts

-- 0x07
function RLCA ()
  shift = shiftLeft(registers[1], 1)

  registers[1] = mask_8b(shift)
  setFlags(zeroFlag:isZero(shift), false, false, carryFlag:rotateLeftCarry(registers[1]))
end

-- 0x17 (THIS COMMAND IS NOT WELL DOCUMENTED)
function RLA ()
  shift = shiftLeft(registers[1], 1)

  registers[1] = mask_8b(shift)
  setFlags(zeroFlag:isZero(shift), false, false, false)
end

-- 0x0f
function RRCA ()
  shift = shiftRight(registers[1], 1)

  setFlags(zeroFlag:isZero(shift), false, false, carryFlag:rotateRightCarry(registers[1]))
  registers[1] = mask_8b(shift)
end

-- 0x1f
function RRA ()
  shift = shiftRight(registers[1], 1)

  registers[1] = mask_8b(shift)
  setFlags(zeroFlag:isZero(shift), false, false, false)
end

function rlc (rIndex, store)
  eAssert("rlc", rIndex, "rIndex", "number")
  eAssert("rlc", store, "store", "boolean")

  startValue = store and registers[rIndex] or memory:read_8b(getRegister_16b(rIndex))
  shift = mask_8(shiftLeft(startValue, 1))

  if not store then
    registers[rIndex] = shift
  else
    memory:write_8b(getRegister_16b(rIndex), shift)
  end

  setFlags(zeroFlag:isZero(shift), false, false, carryFlag:rotateLeftCarry(startValue))
end

-- 0xcb 0x07
function RLC_A ()
  rlc(1, false)
end

-- 0xcb 0x00
function RLC_B ()
  rlc(2, false)
end

-- 0xcb 0x01
function RLC_C ()
  rlc(3, false)
end

-- 0xcb 0x02
function RLC_D ()
  rlc(4, false)
end

-- 0xcb 0x03
function RLC_E ()
  rlc(5, false)
end

-- 0xcb 0x04
function RLC_H ()
  rlc(6, false)
end

-- 0xcb 0x05
function RLC_L ()
  rlc(7, false)
end

-- 0xcb 0x06
function RLC_HL ()
  rlc(6, true)
end

function rl (rIndex, store)
  eAssert("rl", rIndex, "rIndex", "number")
  eAssert("rl", store, "store", "boolean")

  startValue = store and registers[rIndex] or memory:read_8b(getRegister_16b(rIndex))
  shift = mask_8b(shiftLeft(startValue, 1))

  if not store then
    registers[rIndex] = shift
  else
    memory:write_8b(getRegister_16b(rIndex), shift)
  end

  setFlags(zeroFlag:isZero(shift), false, false, false)
end

-- 0xcb 0x17
function RL_A ()
  rl(1, false)
end

-- 0xcb 0x10
function RL_B ()
  rl(2, false)
end

-- 0xcb 0x11
function RL_C ()
  rl(3, false)
end

-- 0xcb 0x12
function RL_D ()
  rl(4, false)
end

-- 0xcb 0x13
function RL_E ()
  rl(5, false)
end

-- 0xcb 0x14
function RL_H ()
  rl(6, false)
end

-- 0xcb 0x15
function RL_L ()
  rl(7, false)
end

-- 0xcb 0x16
function RL_HL ()
  rl(6, true)
end

function rrc (rIndex, store)
  eAssert("rrc", rIndex, "rIndex", "number")
  eAssert("rrc", store, "store", "boolean")

  startValue = store and registers[rIndex] or memory:read_8b(getRegister_16b(rIndex))
  shift = shiftRight(registers[rIndex], 1)

  if not store then
    registers[rIndex] = mask_8b(shift)
  else
    memory:write_8b(getRegister_16b(rIndex), mask_8b(shift))
  end

  setFlags(zeroFlag:isZero(shift), false, false, carryFlag:rotateRightCarry(startValue))
end

-- 0xcb 0x0f
function RRC_A ()
  rrc(1, false)
end

-- 0xcb 0x08
function RRC_B ()
  rrc(2, false)
end

-- 0xcb 0x09
function RRC_C ()
  rrc(3, false)
end

-- 0xcb 0x0a
function RRC_D ()
  rrc(4, false)
end

-- 0xcb 0x0b
function RRC_E ()
  rrc(5, false)
end

-- 0xcb 0x0c
function RRC_H ()
  rrc(6, false)
end

-- 0xcb 0x0d
function RRC_L ()
  rrc(7, false)
end

-- 0xcb 0x0e
function RRC_HL ()
  rrc(6, true)
end

function rr (rIndex, store)
  eAssert("rr", rIndex, "rIndex", "number")
  eAssert("rr", store, "store", "boolean")

  startValue = store and registers[rIndex] or memory:read_8b(getRegister_16b(rIndex))
  shift = mask_8b(shiftRight(startValue, 1))

  if not store then
    registers[rIndex] = shift
  else
    memory:write_8b(getRegister_16b(rIndex), shift)
  end

  setFlags(zeroFlag:isZero(shift), false, false, false)
end

-- 0xcb 0x1f
function RR_A ()
  rr(1, false)
end

-- 0xcb 0x18
function RR_B ()
  rr(2, false)
end

-- 0xcb 0x19
function RR_C ()
  rr(3, false)
end

-- 0xcb 0x1a
function RR_D ()
  rr(4, false)
end

-- 0xcb 0x1b
function RR_E ()
  rr(5, false)
end

-- 0xcb 0x1c
function RR_H ()
  rr(6, false)
end

-- 0xcb 0x1d
function RR_L ()
  rr(7, false)
end

-- 0xcb 0x1e
function RR_HL ()
  rr(6, true)
end

function sla (rIndex, store)
  eAssert("sla", rIndex, "rIndex", "number")
  eAssert("sla", store, "store", "boolean")

  startValue = store and registers[rIndex] or memory:read_8b(getRegister_16b(rIndex))
  shift = mask_8b(shiftLeft(startValue, 1))
  setFlags(zeroFlag:isZero(shift), false, false, carryFlag:rotateLeftCarry(startValue))

  bShift = toBits(shift, 8)
  bShift[8] = 0

  if not store then
    registers[rIndex] = toInt(bShift)
  else
    memory:write_8b(getRegister_16b(rIndex), toInt(bShift))
  end
end

-- 0xcb 0x27
function SLA_A ()
  sla(1, false)
end

-- 0xcb 0x20
function SLA_B ()
  sla(2, false)
end

-- 0xcb 0x21
function SLA_C ()
  sla(3, false)
end

-- 0xcb 0x22
function SLA_D ()
  sla(4, false)
end

-- 0xcb 0x23
function SLA_E ()
  sla(5, false)
end

-- 0xcb 0x24
function SLA_H ()
  sla(6, false)
end

-- 0xcb 0x25
function SLA_L ()
  sla(7, false)
end

-- 0xcb 0x26
function SLA_HL ()
  sla(6, true)
end

function sra (rIndex, store)
  eAssert("sra", rIndex, "rIndex", "number")
  eAssert("sra", store, "store", "boolean")

  startValue = store and registers[rIndex] or memory:read_8b(getRegister_16b(rIndex))
  shift = mask_8b(shiftRight(startValue, 1))
  setFlags(zeroFlag:isZero(shift), false, false, carryFlag:rotateRightCarry(startValue))

  bShift = toBits(shift, 8)
  bShift[8] = 0

  if not store then
    registers[rIndex] = toInt(bShift)
  else
    memory:write_8b(getRegister_16b(rIndex), toInt(bShift))
  end
end

-- 0xcb 0x2f
function SRA_A ()
  sra(1, false)
end

-- 0xcb 0x28
function SRA_B ()
  sra(2, false)
end

-- 0xcb 0x29
function SRA_C ()
  sra(3, false)
end

-- 0xcb 0x2a
function SRA_D ()
  sra(4, false)
end

-- 0xcb 0x2b
function SRA_E ()
  sra(5, false)
end

-- 0xcb 0x2c
function SRA_H ()
  sra(6, false)
end

-- 0xcb 0x2d
function SRA_L ()
  sra(7, false)
end

-- 0xcb 0x2e
function SRA_HL ()
  sra(6, true)
end

function srl (rIndex, store)
  eAssert("srl", rIndex, "rIndex", "number")
  eAssert("srl", store, "store", "boolean")

  startValue = store and registers[rIndex] or memory:read_8b(getRegister_16b(rIndex))
  shift = mask_8b(shiftRight(startValue, 1))
  setFlags(zeroFlag:isZero(shift), false, false, carryFlag:rotateRightCarry(startValue))

  bShift = toBits(shift, 8)
  bShift[8] = 0

  if not store then
    registers[rIndex] = toInt(bShift)
  else
    memory:write_8b(getRegister_16b(rIndex), mask_8b(toInt(bShift)))
  end
end

-- 0xcb 0x3f
function SRL_A ()
  srl(1, false)
end

-- 0xcb 0x38
function SRL_B ()
  srl(2, false)
end

-- 0xcb 0x39
function SRL_C ()
  srl(3, false)
end

-- 0xcb 0x3a
function SRL_D ()
  srl(4, false)
end

-- 0xcb 0x3b
function SRL_E ()
  srl(5, false)
end

-- 0xcb 0x3c
function SRL_H ()
  srl(6, false)
end

-- 0xcb 0x3d
function SRL_L ()
  srl(7, false)
end

-- 0xcb 0x3e
function SRL_HL ()
  srl(6, true)
end

-- Bit Operations

function bit (b, rIndex, store)
  eAssert("bit", b, "b", "number")
  eAssert("bit", rIndex, "rIndex", "number")
  eAssert("bit", store, "store", "boolean")

  startValue = store and registers[rIndex] or memory:read_8b(getRegister_16b(rIndex))
  bits = toBits(startValue, 8)
  setFlags(zeroFlag:isZero(bits[b + 1]), false, true, nil)
end

-- 0xcb 0x47
function BIT_b_A (b)
  bit(b, 1, false)
end

-- 0xcb 0x40
function BIT_b_B (b)
  bit(b, 2, false)
end

-- 0xcb 0x41
function BIT_b_C (b)
  bit(b, 3, false)
end

-- 0xcb 0x42
function BIT_b_D (b)
  bit(b, 4, false)
end
-- 0xcb 0x43
function BIT_b_E (b)
  bit(b, 5, false)
end

-- 0xcb 0x44
function BIT_b_H (b)
  bit(b, 6, false)
end

-- 0xcb 0x45
function BIT_b_L (b)
  bit(b, 7, false)
end

-- 0xcb 0x46
function BIT_b_HL (b)
  bit(b, 6, true)
end

function set (b, rIndex, store)
  eAssert("set", b, "b", "number")
  eAssert("set", rIndex, "rIndex", "number")
  eAssert("set", store, "store", "boolean")

  startValue = store and registers[rIndex] or memory:read_8b(getRegister_16b(rIndex))
  bits = toBits(startValue, 8)
  bits[b + 1] = 1 

  if not store then
    registers[rIndex] = toInt(bits)
  else
    memory:write_8b(getRegister_16b(rIndex), toInt(bits))
  end
end

-- 0xcb 0xc7
function SET_b_A (b)
  set(b, 1, false)
end

-- 0xcb 0xc0
function SET_b_B (b)
  set(b, 2, false)
end

-- 0xcb 0xc1
function SET_b_C (b)
  set(b, 3, false)
end

-- 0xcb 0xc2
function SET_b_D (b)
  set(b, 4, false)
end

-- 0xcb 0xc3
function SET_b_E (b)
  set(b, 5, false)
end

-- 0xcb 0xc4
function SET_b_H (b)
  set(b, 6, false)
end

-- 0xcb 0xc5
function SET_b_L (b)
  set(b, 7, false)
end

-- 0xcb 0xc6
function SET_b_HL (b)
  set(b, 6, true)
end

function res (b, rIndex, store)
  eAssert("res", b, "b", "number")
  eAssert("res", rIndex, "rIndex", "number")
  eAssert("res", store, "store", "boolean")

  startValue = store and registers[rIndex] or memory:read_8b(getRegister_16b(rIndex))
  bits = toBits(startValue, 8)
  bits[b + 1] = 0

  if not store then
    registers[rIndex] = toInt(bits)
  else
    memory:write_8b(getRegister_16b(rIndex), toInt(bits))
  end
end

-- 0xcb 0x87
function RES_b_A (b)
  res(b, 1, false)
end

-- 0xcb 0x80
function RES_b_B (b)
  res(b, 2, false)
end

-- 0xcb 0x81
function RES_b_C (b)
  res(b, 3, false)
end

-- 0xcb 0x82
function RES_b_D (b)
  res(b, 4, false)
end

-- 0xcb 0x83
function RES_b_E (b)
  res(b, 5, false)
end

-- 0xcb 0x84
function RES_b_H (b)
  res(b, 6, false)
end

-- 0xcb 0x85
function RES_b_L (b)
  res(b, 7, false)
end

-- 0xcb 0x86
function RES_b_HL (b)
  res(b, 6, true)
end

-- Jumps

function jp (cc, nn, tByte)
  --eAssert("jp", cc, "cc", "string") cc can be nil
  eAssert("jp", nn, "nn", "number")

  tByte = tByte or false -- JP and CALL have two byte args
  eAssert("jp", tByte, "tByte", "boolean")
  
  location = nn + 1

  if cc == nil then
    pc = location
		return
  else
    if cc == "NZ" then
      if not zeroFlag:isSet() then
        pc = location
				return
      end
    elseif cc == "Z" then
      if zeroFlag:isSet() then
        pc = location
				return
      end
    elseif cc == "NC" then
      if not carryFlag:isSet() then
        pc = location
				return
      end
    else
      if carryFlag:isSet() then
        pc = location
				return
      end
    end
  end

  if tByte then
    pc = pc + 2
  else
    pc = pc + 1
  end
end

-- 0xc3
function JP_nn (nn)
  jp(nil, nn, true)
end

-- 0xc2
function JP_NZ_nn (nn)
  jp("NZ", nn, true)
end

-- 0xca
function JP_Z_nn (nn)
  jp("Z", nn, true)
end

-- 0xd2
function JP_NC_nn (nn)
  jp("NC", nn, true)
end

-- 0xda
function JP_C_nn (nn)
  jp("C", nn, true)
end

-- 0xe9
function JP_HL ()
  jp(nil, memory:read_8b(getRegister_16b(6)), true)
end

function jr (cc, n)
  eAssert("jr", n, "n", "number")
  jumpTo = pc + n
  jp(cc, jumpTo)
end

-- 0x18
function JR_n (n)
  jr(nil, n)
end

-- 0x20
function JR_NZ_n (n)
  jr("NZ", n)
end

-- 0x28
function JR_Z_n (n)
  jr("Z", n)
end

-- 0x30
function JR_NC_n (n)
  jr("NC", n)
end

-- 0x38
function JR_C_n (n)
  jr("C", n)
end

-- Calls

function call (cc, nn)
  eAssert("call", nn, "nn", "number")
  push(pc)

  jp(cc, nn, true)
end

-- 0xcd
function CALL_nn (nn)
  call(nil, nn)
end

-- 0xc4
function CALL_NZ_nn (nn)
  call("NZ", nn)
end

-- 0xcc
function CALL_Z_nn (nn)
  call("Z", nn)
end

-- 0xd4
function CALL_NC_nn (nn)
  call("NC", nn)
end

-- 0xdc
function CALL_C_nn (nn)
  call("C", nn)
end

-- Restarts

function rst (n)
  eAssert("rst", n, "n", "number")
  push(pc)

  jp(nil, n)
end

-- 0xc7
function RST_00H ()
  rst(0x00)
end

-- 0xcf
function RST_08H ()
  rst(0x08)
end

-- 0xd7
function RST_10H ()
  rst(0x10)
end

-- 0xdf
function RST_18H ()
  rst(0x18)
end

-- 0xe7
function RST_20H ()
  rst(0x20)
end

-- 0xef
function RST_28H ()
  rst(0x28)
end

-- 0xf7
function RST_30H ()
  rst(0x30)
end

-- 0xff
function RST_38H ()
  rst(0x38)
end

-- Returns

function ret (cc)
  address = memory:read_16b(registers[9])

  registers[9] = registers[9] + 2

  jp(cc, address)
end

-- 0xc9
function RET ()
  ret(nil)
end

-- 0xc0
function RET_NZ ()
  ret("NZ")
end

-- 0xc8
function RET_Z ()
  ret("Z")
end

-- 0xd0
function RET_NC ()
  ret("NC")
end

-- 0xd8
function RET_C ()
  ret("C")
end

-- 0xd9
function RETI ()
  ret(nil)
  EI()
end


command = ""

function log (str)
  command = str
  debugger:checkStopOn(command)
end

-- The pc - 1 gets a + 1 when going through the read method
function dispatcher ()
  if runBios and pc > 0xff then
    runBios = false 
    pc = 0x101
  end

  pcHex = toHex(pc - 1)

  if memory:read_8b(pc - 1) == 0x06 then
    c = 8
    LD_B_n(memory:read_8b(pc))
    log("LD B, " .. toHex(memory:read_8b(pc)))
    pc = pc + 2
  elseif memory:read_8b(pc - 1) == 0x0e then
    c = 8
    LD_C_n(memory:read_8b(pc))
    log("LD C, " .. toHex(memory:read_8b(pc)))
    pc = pc + 2
  elseif memory:read_8b(pc - 1) == 0x16 then
    c = 8
    LD_D_n(memory:read_8b(pc))
    log("LD D, " .. toHex(memory:read_8b(pc)))
    pc = pc + 2
  elseif memory:read_8b(pc - 1) == 0x1e then
    c = 8
    LD_E_n(memory:read_8b(pc))
    log("LD E, " .. toHex(memory:read_8b(pc)))
    pc = pc + 2
  elseif memory:read_8b(pc - 1) == 0x26 then
    c = 8
    LD_H_n(memory:read_8b(pc))
    log("LD H, " .. toHex(memory:read_8b(pc)))
    pc = pc + 2
  elseif memory:read_8b(pc - 1) == 0x2e then
    c = 8
    LD_L_n(memory:read_8b(pc))
    log("LD L, " .. toHex(memory:read_8b(pc)))
    pc = pc + 2
  elseif memory:read_8b(pc - 1) == 0x7f then
    c = 4
    LD_A_A()
    log("LD A, A")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x78 then
    c = 4
    LD_A_B()
    log("LD A, B")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x79 then
    c = 4
    LD_A_C()
    log("LD A, C")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x7a then
    c = 4
    LD_A_D()
    log("LD A, D")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x7b then
    c = 4
    LD_A_E()
    log("LD A, E")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x7c then
    c = 4
    LD_A_H()
    log("LD A, H")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x7d then
    c = 4
    LD_A_L()
    log("LD A, L")
    pc = pc +1
  elseif memory:read_8b(pc - 1) == 0x7e then
    c = 8
    LD_A_HL()
    log("LD A, (HL)")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x40 then
    c = 4
    LD_B_B()
    log("LD B, B")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x41 then
    c = 4
    LD_B_C()
    log("LD B, C")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x42 then
    c = 4
    LD_B_D()
    log("LD B, D")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x43 then
    c = 4
    LD_B_E()
    log("LD B, E")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x44 then
    c = 4
    LD_B_H()
    log("LD B, H")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x45 then
    c = 4
    LD_B_L()
    log("LD B, L")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x46 then
    c = 8
    LD_B_HL()
    log("LD B, (HL)")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x48 then
    c = 4
    LD_C_B()
    log("LD C, B")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x49 then
    c = 4
    LD_C_C()
    log("LD C, C")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x4a then
    c = 4
    LD_C_D()
    log("LD C, D")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x4b then
    c = 4
    LD_C_E()
    log("LD C, E")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x4c then
    c = 4
    LD_C_H()
    log("LD C, H")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x4d then
    c = 4
    LD_C_L()
    log("LD C, L")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x4e then
    c = 8
    LD_C_HL()
    log("LD C, (HL)")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x50 then
    c = 4
    LD_D_B()
    log("LD D, B")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x51 then
    c = 4
    LD_D_C()
    log("LD D, C")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x52 then
    c = 4
    LD_D_D()
    log("LD D, D")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x53 then
    c = 4
    LD_D_E()
    log("LD D, E")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x54 then
    c = 4
    LD_D_H()
    log("LD D, H")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x55 then
    c = 4
    LD_D_L()
    log("LD D, L")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x56 then
    c = 8
    LD_D_HL()
    log("LD D, (HL)")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x58 then
    c = 4
    LD_E_B()
    log("LD E, B")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x59 then
    c = 4
    LD_E_C()
    log("LD E, C")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x5a then
    c = 4
    LD_E_D()
    log("LD E, D")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x5b then
    c = 4
    LD_E_E()
    log("LD E, E")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x5c then
    c = 4
    LD_E_H()
    log("LD E, H")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x5d then
    c = 4
    LD_E_L()
    log("LD E, L")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x5e then
    c = 8
    LD_E_HL()
    log("LD E, (HL)")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x60 then
    c = 4
    LD_H_B()
    log("LD H, B")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x61 then
    c = 4
    LD_H_C()
    log("LD H, C")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x62 then
    c = 4
    LD_H_D()
    log("LD H, D")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x63 then
    c = 4
    LD_H_E()
    log("LD H, E")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x64 then
    c = 4
    LD_H_H()
    log("LD H, H")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x65 then
    c = 4
    LD_H_L()
    log("LD H, L")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x66 then
    c = 8
    LD_H_HL()
    log("LD H, (HL)")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x68 then
    c = 4
    LD_L_B()
    log("LD L, B")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x69 then
    c = 4
    LD_L_C()
    log("LD L, C")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x6a then
    c = 4
    LD_L_D()
    log("LD L, D")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x6b then
    c = 4
    LD_L_E()
    log("LD L, E")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x6c then
    c = 4
    LD_L_H()
    log("LD L, H")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x6d then
    c = 4
    LD_L_L()
    log("LD L, L")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x6e then
    c = 8
    LD_L_HL()
    log("LD L, (HL)")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x70 then
    c = 8
    LD_HL_B()
    log("LD (HL), B")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x71 then
    c = 8
    LD_HL_C()
    log("LD (HL), C")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x72 then
    c = 8
    LD_HL_D()
    log("LD (HL), D")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x73 then
    c = 8
    LD_HL_E()
    log("LD (HL), E")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x74 then
    c = 8
    LD_HL_H()
    log("LD (HL), H")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x75 then
    c = 8
    LD_HL_L()
    log("LD (HL), L")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x36 then
    c = 12
    LD_HL_n(memory:read_8b(pc))
    log("LD (HL), " .. toHex(memory:read_8b(pc)))
    pc = pc + 2
  elseif memory:read_8b(pc - 1) == 0x0a then
    c = 8
    LD_A_BC()
    log("LD A, (BC)")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x1a then
    c = 8
    LD_A_DE()
    log("LD A, (DE)")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x7e then
    c = 8
    LD_A_HL()
    log("LD A, (HL)")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xfa then
    c = 16
    LD_A_nn(bitsTo_16b(memory:read_8b(pc), memory:read_8b(pc + 1)))
    log("LD A, " .. toHex(memory:read_8b(pc)) .. u_toHex(pc + 1))
    pc = pc + 3
  elseif memory:read_8b(pc - 1) == 0x3e then
    c = 8
    LD_A_n(memory:read_8b(pc))
    log("LD A, " .. toHex(memory:read_8b(pc)))
    pc = pc + 2
  elseif memory:read_8b(pc - 1) == 0x47 then
    c = 4
    LD_B_A()
    log("LD B, A")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x4f then
    c = 4
    LD_C_A()
    log("LD C, A")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x57 then
    c = 4
    LD_D_A()
    log("LD D, A")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x5f then
    c = 4
    LD_E_A()
    log("LD E, A")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x67 then
    c = 4
    LD_H_A()
    log("LD H, A")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x6f then
    c = 4
    LD_L_A()
    log("LD L, A")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x02 then
    c = 8
    LD_BC_A()
    log("LD (BC), A")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x12 then
    c = 8
    LD_DE_A()
    log("LD (DE), A")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x77 then
    c = 8
    LD_HL_A()
    log("LD (HL), A")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xea then
    c = 16
    LD_nn_A(bitsTo_16b(memory:read_8b(pc), memory:read_8b(pc + 1)))
    log("LD (" .. toHex(memory:read_8b(pc)) .. "" .. u_toHex(pc + 1) .. "), A")
    pc = pc + 3
  elseif memory:read_8b(pc - 1) == 0xf2 then
    c = 8
    LD_A_iC()
    log("LD A, (C)")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xe2 then
    c = 8
    LD_iC_A()
    log("LD ($FF00 .. C), A")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x3a then
    c = 8
    LDD_A_HL()
    log("LD A, (HLD) or LD A, (HL-) or LDD A, (HL)")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x32 then
    c = 8
    LDD_HL_A()
    log("LD (HLD), A or LD (HL-), A or LDD (HL), A")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x2a then
    c = 8
    LDI_A_HL()
    log("LD A, (HLI) or LD A, (HL..) or LDI A, (HL)")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x22 then
    c = 8
    LDI_HL_A()
    log("LD (HLI), LD A or LD (HL..), LDI A or (HL), A")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xe0 then
    c = 12
    LDH_in_A(memory:read_8b(pc))
    log("LDH ($FF00 + " .. toHex(memory:read_8b(pc)) .. "), A")
    pc = pc + 2
  elseif memory:read_8b(pc - 1) == 0xf0 then
    c = 12
    LDH_A_in(memory:read_8b(pc))
    log("LDH A, ($FF00 + " .. toHex(memory:read_8b(pc)) .. ")")
    pc = pc + 2
  elseif memory:read_8b(pc - 1) == 0x01 then
    c = 12
    LD_BC_nn(bitsTo_16b(memory:read_8b(pc), memory:read_8b(pc + 1)))
    log("LD BC, " .. toHex(memory:read_8b(pc)) .. u_toHex(pc + 1))
    pc = pc + 3
  elseif memory:read_8b(pc - 1) == 0x11 then
    c = 12
    LD_DE_nn(bitsTo_16b(memory:read_8b(pc), memory:read_8b(pc + 1)))
    log("LD DE, " .. toHex(memory:read_8b(pc)) .. u_toHex(pc + 1))
    pc = pc + 3
  elseif memory:read_8b(pc - 1) == 0x21 then
    c = 12
    LD_HL_nn(bitsTo_16b(memory:read_8b(pc), memory:read_8b(pc + 1)))
    log("LD HL, " .. toHex(bitsTo_16b(memory:read_8b(pc), memory:read_8b(pc + 1))))
    pc = pc + 3
  elseif memory:read_8b(pc - 1) == 0x31 then
    c = 12
    LD_SP_nn(bitsTo_16b(memory:read_8b(pc), memory:read_8b(pc + 1)))
    log("LD SP, " .. toHex(bitsTo_16b(memory:read_8b(pc), memory:read_8b(pc + 1))))
    pc = pc + 3
  elseif memory:read_8b(pc - 1) == 0xf9 then
    c = 8
    LD_SP_HL()
    log("LD SP, HL")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xf8 then
    c = 12
    LDHL_SP_n(memory:read_8b(pc))
    log("LDHL SP, " .. toHex(memory:read_8b(pc)) .. " or LD HL, SP .. " .. toHex(memory:read_8b(pc)))
    pc = pc + 2
  elseif memory:read_8b(pc - 1) == 0x08 then
    c = 20
    LD_nn_SP(bitsTo_16b(memory:read_8b(pc), memory:read_8b(pc + 1)))
    log("LD " .. toHex(memory:read_8b(pc)) .. u_toHex(pc + 1) .. ", SP")
    pc = pc + 3
  elseif memory:read_8b(pc - 1) == 0xf5 then
    c = 16
    PUSH_AF()
    log("PUSH AF")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xc5 then
    c = 16
    PUSH_BC()
    log("PUSH BC")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xd5 then
    c = 16
    PUSH_DE()
    log("PUSH DE")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xe5 then
    c = 16
    PUSH_HL()
    log("PUSH HL")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xf1 then
    c = 12
    POP_AF()
    log("POP AF")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xc1 then
    c = 12
    POP_BC()
    log("POP BC")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xd1 then
    c = 12
    POP_DE()
    log("POP DE")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xe1 then
    c = 12
    POP_HL()
    log("POP HL")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x87 then
    c = 4
    ADD_A_A()
    log("ADD A, A")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x80 then
    c = 4
    ADD_A_B()
    log("ADD A, B")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x81 then
    c = 4
    ADD_A_C()
    log("ADD A, C")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x82 then
    c = 4
    ADD_A_D()
    log("ADD A, D")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x83 then
    c = 4
    ADD_A_E()
    log("ADD A, E")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x84 then
    c = 4
    ADD_A_H()
    log("ADD A, H")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x85 then
    c = 4
    ADD_A_L()
    log("ADD A, L")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x86 then
    c = 8
    ADD_A_HL()
    log("ADD A, (HL)")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xc6 then
    c = 8
    ADD_A_n(memory:read_8b(pc))
    log("ADD A, " .. toHex(memory:read_8b(pc)))
    pc = pc + 2
  elseif memory:read_8b(pc - 1) == 0x8f then
    c = 4
    ADC_A_A()
    log("ADC A, A")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x88 then
    c = 4
    ADC_A_B()
    log("ADC A, B")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x89 then
    c = 4
    ADC_A_C()
    log("ADC A, C")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x8a then
    c = 4
    ADC_A_D()
    log("ADC A, D")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x8b then
    c = 4
    ADC_A_E()
    log("ADC A, E")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x8c then
    c = 4
    ADC_A_H()
    log("ADC A, H")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x8d then
    c = 4
    ADC_A_L()
    log("ADC A, L")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x8e then
    c = 8
    ADC_A_HL()
    log("ADC A, (HL)")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xce then
    c = 8
    ADC_A_n(memory:read_8b(pc))
    log("ADC A, " .. toHex(memory:read_8b(pc)))
    pc = pc + 2
  elseif memory:read_8b(pc - 1) == 0x97 then
    c = 4
    SUB_A()
    log("SUB A, A")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x90 then
    c = 4
    SUB_B()
    log("SUB A, B")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x91 then
    c = 4
    SUB_C()
    log("SUB A, C")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x92 then
    c = 4
    SUB_D()
    log("SUB A, D")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x93 then
    c = 4
    SUB_E()
    log("SUB A, E")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x94 then
    c = 4
    SUB_H()
    log("SUB A, H")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x95 then
    c = 4
    SUB_L()
    log("SUB A, L")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x96 then
    c = 8
    SUB_HL()
    log("SUB A, (HL)")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xd6 then
    c = 8
    SUB_n(memory:read_8b(pc))
    log("SUB A, " .. toHex(memory:read_8b(pc)))
    pc = pc + 2
  elseif memory:read_8b(pc - 1) == 0x9f then
    c = 4
    SBC_A_A()
    log("SBC A, A")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x98 then
    c = 4
    SBC_A_B()
    log("SBC A, B")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x99 then
    c = 4
    SBC_A_C()
    log("SBC A, C")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x9a then
    c = 4
    SBC_A_D()
    log("SBC A, D")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x9b then
    c = 4
    SBC_A_E()
    log("SBC A, E")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x9c then
    c = 4
    SBC_A_H()
    log("SBC A, H")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x9d then
    c = 4
    SBC_A_L()
    log("SBC A, L")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x9e then
    c = 8
    SBC_A_HL()
    log("SBC A, (HL)")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xde then
    c = 8
    SBC_A_n(memory:read_8b(pc))
    log("SBC A, " .. toHex(memory:read_8b(pc)))
    pc = pc + 2
  elseif memory:read_8b(pc - 1) == 0xa7 then
    c = 4
    AND_A()
    log("AND A")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xa0 then
    c = 4
    AND_B()
    log("AND B")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xa1 then
    c = 4
    AND_C()
    log("AND C")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xa2 then
    c = 4
    AND_D()
    log("AND D")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xa3 then
    c = 4
    AND_E()
    log("AND E")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xa4 then
    c = 4
    AND_H()
    log("AND H")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xa5 then
    c = 4
    AND_L()
    log("AND L")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xa6 then
    c = 8
    AND_HL()
    log("AND (HL)")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xe6 then
    c = 8
    AND_n(memory:read_8b(pc))
    log("AND " .. toHex(memory:read_8b(pc)))
    pc = pc + 2
  elseif memory:read_8b(pc - 1) == 0xb7 then
    c = 4
    OR_A()
    log("OR A")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xb0 then
    c = 4
    OR_B()
    log("OR B")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xb1 then
    c = 4
    OR_C()
    log("OR C")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xb2 then
    c = 4
    OR_D()
    log("OR D")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xb3 then
    c = 4
    OR_E()
    log("OR E")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xb4 then
    c = 4
    OR_H()
    log("OR H")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xb5 then
    c = 4
    OR_L()
    log("OR L")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xb6 then
    c = 8
    OR_HL()
    log("OR (HL)")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xf6 then
    c = 8
    OR_n(memory:read_8b(pc))
    log("OR " .. toHex(memory:read_8b(pc)))
    pc = pc + 2
  elseif memory:read_8b(pc - 1) == 0xaf then
    c = 4
    XOR_A()
    log("XOR A")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xa8 then
    c = 4
    XOR_B()
    log("XOR B")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xa9 then
    c = 4
    XOR_C()
    log("XOR C")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xaa then
    c = 4
    XOR_D()
    log("XOR D")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xab then
    c = 4
    XOR_E()
    log("XOR E")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xac then
    c = 4
    XOR_H()
    log("XOR H")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xad then
    c = 4
    XOR_L()
    log("XOR L")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xea then
    c = 8
    XOR_HL()
    log("XOR (HL)")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xee then
    c = 8
    XOR_n(memory:read_8b(pc))
    log("XOR " .. toHex(memory:read_8b(pc)))
    pc = pc + 2
  elseif memory:read_8b(pc - 1) == 0xbf then
    c = 4
    CP_A()
    log("CP A")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xb8 then
    c = 4
    CP_B()
    log("CP B")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xb9 then
    c = 4
    CP_C()
    log("CP C")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xba then
    c = 4
    CP_D()
    log("CP D")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xbb then
    c = 4
    CP_E()
    log("CP E")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xbc then
    c = 4
    CP_H()
    log("CP H")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xbd then
    c = 4
    CP_L()
    log("CP L")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xbe then
    c = 8
    CP_HL()
    log("CP (HL)")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xfe then
    c = 8
    CP_n(memory:read_8b(pc))
    log("CP " .. toHex(memory:read_8b(pc)))
    pc = pc + 2
  elseif memory:read_8b(pc - 1) == 0x3c then
    c = 4
    INC_A()
    log("INC A")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x04 then
    c = 4
    INC_B()
    log("INC B")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x0c then
    c = 4
    INC_C()
    log("INC C")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x14 then
    c = 4
    INC_D()
    log("INC D")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x1c then
    c = 4
    INC_E()
    log("INC E")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x24 then
    c = 4
    INC_H()
    log("INC H")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x2c then
    c = 4
    INC_L()
    log("INC L")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x34 then
    c = 12
    INC_HL()
    log("INC (HL)")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x3d then
    c = 4
    DEC_A()
    log("DEC A")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x05 then
    c = 4
    DEC_B()
    log("DEC B")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x0d then
    c = 4
    DEC_C()
    log("DEC C")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x15 then
    c = 4
    DEC_D()
    log("DEC D")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x1d then
    c = 4
    DEC_E()
    log("DEC E")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x25 then
    c = 4
    DEC_H()
    log("DEC H")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x2d then
    c = 4
    DEC_L()
    log("DEC L")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x35 then
    c = 12
    DEC_HL()
    log("DEC (HL)")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x09 then
    c = 8
    ADD_HL_BC()
    log("ADD HL, BC")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x19 then
    c = 8
    ADD_HL_DE()
    log("ADD HL, DE")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x29 then
    c = 8
    ADD_HL_HL()
    log("ADD HL, HL")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x39 then
    c = 8
    ADD_HL_SP()
    log("ADD HL, SP")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xe8 then
    c = 16
    ADD_SP_n(memory:read_8b(pc))
    log("ADD SP, " .. toHex(pc))
    pc = pc + 2
  elseif memory:read_8b(pc - 1) == 0x03 then
    c = 8
    INC_BC()
    log("INC BC")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x13 then
    c = 8
    INC_DE()
    log("INC DE")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x23 then
    c = 8
    INC_HL()
    log("INC HL")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x33 then
    c = 8
    INC_SP()
    log("INC SP")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x0b then
    c = 8
    DEC_BC()
    log("DEC BC")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x1b then
    c = 8
    DEC_DE()
    log("DEC DE")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x2b then
    c = 8
    DEC_HL()
    log("DEC HL")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x3b then
    c = 8
    DEC_SP()
    log("DEC SP")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x27 then
    c = 4
    DAA()
    log("DAA")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x2f then
    c = 4
    CPL()
    log("CPL")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x3f then
    c = 4
    CCF()
    log("CCF")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x37 then
    c = 4
    SCF()
    log("SCF")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x00 then
    c = 4
    NOP()
    log("NOP")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x76 then
    c = 4
    HALT()
    log("HALT")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x10 then
    c = 4
    STOP()
    log("STOP")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xf3 then
    c = 4
    DI()
    log("DI")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xfb then
    c = 4
    EI()
    log("EI")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x07 then
    c = 4
    RLCA()
    log("RLCA")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x17 then
    c = 4
    RLA()
    log("RLA")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x0f then
    c = 4
    RRCA()
    log("RRCA")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0x1f then
    c = 4
    RRA()
    log("RRA")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xc3 then
    c = 12
    log("JP " .. toHex(bitsTo_16b(memory:read_8b(pc), memory:read_8b(pc + 1))))
    JP_nn(bitsTo_16b(memory:read_8b(pc), memory:read_8b(pc + 1)))
  elseif memory:read_8b(pc - 1) == 0xc2 then
    c = 12
    log("JP NZ, " .. toHex(bitsTo_16b(memory:read_8b(pc), memory:read_8b(pc + 1))))
    JP_NZ_nn(bitsTo_16b(memory:read_8b(pc), memory:read_8b(pc + 1)))
  elseif memory:read_8b(pc - 1) == 0xca then
    c = 12
    log("JP Z" .. toHex(bitsTo_16b(memory:read_8b(pc), memory:read_8b(pc + 1))))
    JP_Z_nn(bitsTo_16b(memory:read_8b(pc), memory:read_8b(pc + 1)))
  elseif memory:read_8b(pc - 1) == 0xd2 then
    c = 12
    log("JP  NC" .. toHex(bitsTo_16b(memory:read_8b(pc), memory:read_8b(pc + 1))))
    JP_NC_nn(bitsTo_16b(memory:read_8b(pc), memory:read_8b(pc + 1)))
  elseif memory:read_8b(pc - 1) == 0xda then
    c = 12
    log("JP  C" .. toHex(bitsTo_16b(memory:read_8b(pc), memory:read_8b(pc + 1))))
    JP_C_nn(bitsTo_16b(memory:read_8b(pc), memory:read_8b(pc + 1)))
  elseif memory:read_8b(pc - 1) == 0xe9 then
    c = 4
    log("JP (HL)")
    JP_HL(bitsTo_16b(memory:read_8b(pc), memory:read_8b(pc + 1)))
  elseif memory:read_8b(pc - 1) == 0x18 then
    c = 8
    log("JR " .. toHex(memory:read_8b(pc)))
    JR_n(memory:read_8b(pc))
  elseif memory:read_8b(pc - 1) == 0x20 then
    c = 8
    log("JR NZ, " .. toHex(memory:read_8b(pc)))
    JR_NZ_n(memory:read_8b(pc))
  elseif memory:read_8b(pc - 1) == 0x28 then
    c = 8
    log("JR Z, " .. toHex(memory:read_8b(pc)))
    JR_Z_n(memory:read_8b(pc))
  elseif memory:read_8b(pc - 1) == 0x30 then
    c = 8
    log("JR NC, " .. toHex(memory:read_8b(pc)))
    JR_NC_n(memory:read_8b(pc))
  elseif memory:read_8b(pc - 1) == 0x38 then
    c = 8
    log("JR C, " .. toHex(memory:read_8b(pc)))
    JR_C_n(memory:read_8b(pc))
  elseif memory:read_8b(pc - 1) == 0xcd then
    c = 12
    log("CALL " .. toHex(bitsTo_16b(memory:read_8b(pc), memory:read_8b(pc + 1))))
    CALL_nn(bitsTo_16b(memory:read_8b(pc), memory:read_8b(pc + 1)))
  elseif memory:read_8b(pc - 1) == 0xc4 then
    c = 12
    log("CALL NZ, " .. toHex(bitsTo_16b(memory:read_8b(pc), memory:read_8b(pc + 1))))
    CALL_NZ_nn(bitsTo_16b(memory:read_8b(pc), memory:read_8b(pc + 1)))
  elseif memory:read_8b(pc - 1) == 0xcc then
    c = 12
    log("CALL Z, " .. toHex(bitsTo_16b(memory:read_8b(pc), memory:read_8b(pc + 1))))
    CALL_Z_nn(bitsTo_16b(memory:read_8b(pc), memory:read_8b(pc + 1)))
  elseif memory:read_8b(pc - 1) == 0xd4 then
    c = 12
    log("CALL NC, " .. toHex(bitsTo_16b(memory:read_8b(pc), memory:read_8b(pc + 1))))
    CALL_NC_nn(bitsTo_16b(memory:read_8b(pc), memory:read_8b(pc + 1)))
  elseif memory:read_8b(pc - 1) == 0xdc then
    c = 12
    log("CALL C, " .. toHex(bitsTo_16b(memory:read_8b(pc), memory:read_8b(pc + 1))))
    CALL_C_nn(bitsTo_16b(memory:read_8b(pc), memory:read_8b(pc + 1)))
  elseif memory:read_8b(pc - 1) == 0xc7 then
    c = 32
    RST_00H()
    log("RST 00H")
  elseif memory:read_8b(pc - 1) == 0xcf then
    c = 32
    log("RST 08H")
    RST_08H()
  elseif memory:read_8b(pc - 1) == 0xd7 then
    c = 32
    log("RST 10H")
    RST_10H()
  elseif memory:read_8b(pc - 1) == 0xdf then
    c = 32
    log("RST 18H")
    RST_18H()
  elseif memory:read_8b(pc - 1) == 0xe7 then
    c = 32
    log("RST 20H")
    RST_20H()
  elseif memory:read_8b(pc - 1) == 0xef then
    c = 32
    log("RST 28H")
    RST_28H()
  elseif memory:read_8b(pc - 1) == 0xf7 then
    c = 32
    log("RST 30H")
    RST_30H()
  elseif memory:read_8b(pc - 1) == 0xff then
    c = 32
    log("RST 38H")
    RST_38H()
  elseif memory:read_8b(pc - 1) == 0xc9 then
    c = 8
    log("RET")
    RET()
  elseif memory:read_8b(pc - 1) == 0xc0 then
    c = 8
    log("RET NZ")
    RET_NZ()
  elseif memory:read_8b(pc - 1) == 0xc8 then
    c = 8
    log("RET Z")
    RET_Z()
  elseif memory:read_8b(pc - 1) == 0xd0 then
    c = 8
    log("RET NC")
    RET_NC()
  elseif memory:read_8b(pc - 1) == 0xd8 then
    c = 8
    log("RET C")
    RET_C()
  elseif memory:read_8b(pc - 1) == 0xd9 then
    c = 8
    log("RETI")
    RETI()
  elseif memory:read_8b(pc - 1) == 0xfc then
    log("0xfc in an undocumented opcode and should not be used!")
    pc = pc + 1
  elseif memory:read_8b(pc - 1) == 0xcb then
    if memory:read_8b(pc) == 0x37 then
      c = 8
      SWAP_A()
      log("SWAP A")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x30 then
      c = 8
      SWAP_B()
      log("SWAP B")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x31 then
      c = 8
      SWAP_C()
      log("SWAP C")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x32 then
      c = 8
      SWAP_D()
      log("SWAP D")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x33 then
      c = 8
      SWAP_E()
      log("SWAP E")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x34 then
      c = 8
      SWAP_H()
      log("SWAP H")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x35 then
      c = 8
      SWAP_L()
      log("SWAP L")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x36 then
      c = 16
      SWAP_HL()
      log("SWAP (HL)")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x07 then
      c = 8
      RLC_A()
      log("RLC A")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x00 then
      c = 8
      RLC_B()
      log("RLC B")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x01 then
      c = 8
      RLC_C()
      log("RLC C")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x02 then
      c = 8
      RLC_D()
      log("RLC D")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x03 then
      c = 8
      RLC_E()
      log("RLC E")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x04 then
      c = 8
      RLC_H()
      log("RLC H")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x05 then
      c = 8
      RLC_L()
      log("RLC L")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x06 then
      c = 16
      RLC_HL()
      log("RLC (HL)")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x17 then
      c = 8
      RL_A()
      log("RL A")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x10 then
      c = 8
      RL_B()
      log("RL B")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x11 then
      c = 8
      RL_C()
      log("RL C")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x12 then
      c = 8
      RL_D()
      log("RL D")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x13 then
      c = 8
      RL_E()
      log("RL E")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x14 then
      c = 8
      RL_H()
      log("RL H")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x15 then
      c = 8
      RL_L()
      log("RL L")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x16 then
      c = 16
      RL_HL()
      log("RL (HL)")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x0f then
      c = 8
      RRC_A()
      log("RRC A")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x08 then
      c = 8
      RRC_B()
      log("RRC B")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x09 then
      c = 8
      RRC_C()
      log("RRC C")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x0a then
      c = 8
      RRC_D()
      log("RRC D")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x0b then
      c = 8
      RRC_E()
      log("RRC E")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x0c then
      c = 8
      RRC_H()
      log("RRC H")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x0d then
      c = 8
      RRC_L()
      log("RRC L")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x0e then
      c = 16
      RRC_HL()
      log("RRC (HL)")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x1f then
      c = 8
      RR_A()
      log("RR A")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x18 then
      c = 8
      RR_B()
      log("RR B")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x19 then
      c = 8
      RR_C()
      log("RR C")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x1a then
      c = 8
      RR_D()
      log("RR D")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x1b then
      c = 8
      RR_E()
      log("RR E")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x1c then
      c = 8
      RR_H()
      log("RR H")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x1d then
      c = 8
      RR_L()
      log("RR L")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x1e then
      c = 16
      RR_HL()
      log("RR (HL)")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x27 then
      c = 8
      SLA_A()
      log("SLA A")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x20 then
      c = 8
      SLA_B()
      log("SLA B")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x21 then
      c = 8
      SLA_C()
      log("SLA C")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x22 then
      c = 8
      SLA_D()
      log("SLA D")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x23 then
      c = 8
      SLA_E()
      log("SLA E")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x24 then
      c = 8
      SLA_H()
      log("SLA H")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x25 then
      c = 8
      SLA_L()
      log("SLA L")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x26 then
      c = 16
      SLA_HL()
      log("SLA (HL)")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x2f then
      c = 8
      SRA_A()
      log("SRA A")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x28 then
      c = 8
      SRA_B()
      log("SRA B")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x29 then
      c = 8
      SRA_C()
      log("SRA C")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x2a then
      c = 8
      SRA_D()
      log("SRA D")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x2b then
      c = 8
      SRA_E()
      log("SRA E")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x2c then
      c = 8
      SRA_H()
      log("SRA H")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x2d then
      c = 8
      SRA_L()
      log("SRA L")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x2e then
      c = 16
      SRA_HL()
      log("SRA (HL)")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x3f then
      c = 8
      SRL_A()
      log("SRL A")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x38 then
      c = 8
      SRL_B()
      log("SRL B")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x39 then
      c = 8
      SRL_C()
      log("SRL C")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x3a then
      c = 8
      SRL_D()
      log("SRL D")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x3b then
      c = 8
      SRL_E()
      log("SRL E")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x3c then
      c = 8
      SRL_H()
      log("SRL H")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x3d then
      c = 8
      SRL_L()
      log("SRL L")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x3e then
      c = 16
      SRL_HL()
      log("SRL (HL)")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0x47 then
      c = 8
      BIT_b_A(memory:read_8b(pc + 1))
      log("BIT " .. toHex(pc + 1) .. ", A")
      pc = pc + 2
    elseif memory:read_8b(pc) == 0x40 then
      c = 8
      BIT_b_B(memory:read_8b(pc + 1))
      log("BIT " .. toHex(pc + 1) .. ", B")
      pc = pc + 2
    elseif memory:read_8b(pc) == 0x41 then
      c = 8
      BIT_b_C(memory:read_8b(pc + 1))
      log("BIT " .. toHex(pc + 1) .. ", C")
      pc = pc + 2
    elseif memory:read_8b(pc) == 0x42 then
      c = 8
      BIT_b_D(memory:read_8b(pc + 1))
      log("BIT " .. toHex(pc + 1) .. ", D")
      pc = pc + 2
    elseif memory:read_8b(pc) == 0x43 then
      c = 8
      BIT_b_E(memory:read_8b(pc + 1))
      log("BIT " .. toHex(pc + 1) .. ", E")
      pc = pc + 2
    elseif memory:read_8b(pc) == 0x44 then
      c = 8
      BIT_b_H(memory:read_8b(pc + 1))
      log("BIT " .. toHex(pc + 1) .. ", H")
      pc = pc + 2
    elseif memory:read_8b(pc) == 0x45 then
      c = 8
      BIT_b_L(memory:read_8b(pc + 1))
      log("BIT " .. toHex(pc + 1) .. ", L")
      pc = pc + 2
    elseif memory:read_8b(pc) == 0x46 then
      c = 16
      BIT_b_HL(memory:read_8b(pc + 1))
      log("BIT " .. toHex(pc + 1) .. ", (HL)")
      pc = pc + 2
    elseif memory:read_8b(pc) == 0xc7 then
      c = 8
      SET_b_A(memory:read_8b(pc + 1))
      log("SET " .. toHex(pc + 1) .. ", A")
      pc = pc + 2
    elseif memory:read_8b(pc) == 0xc0 then
      c = 8
      SET_b_B(memory:read_8b(pc + 1))
      log("SET " .. toHex(pc + 1) .. ", B")
      pc = pc + 2
    elseif memory:read_8b(pc) == 0xc1 then
      c = 8
      SET_b_C(memory:read_8b(pc + 1))
      log("SET " .. toHex(pc + 1) .. ", C")
      pc = pc + 2
    elseif memory:read_8b(pc) == 0xc2 then
      c = 8
      SET_b_D(memory:read_8b(pc + 1))
      log("SET " .. toHex(pc + 1) .. ", D")
      pc = pc + 2
    elseif memory:read_8b(pc) == 0xc3 then
      c = 8
      SET_b_E(memory:read_8b(pc + 1))
      log("SET " .. toHex(pc + 1) .. ", E")
      pc = pc + 2
    elseif memory:read_8b(pc) == 0xc4 then
      c = 8
      SET_b_H(memory:read_8b(pc + 1))
      log("SET " .. toHex(pc + 1) .. ", H")
      pc = pc + 2
    elseif memory:read_8b(pc) == 0xc5 then
      c = 8
      SET_b_L(memory:read_8b(pc + 1))
      log("SET " .. toHex(pc + 1) .. ", L")
      pc = pc + 1
    elseif memory:read_8b(pc) == 0xc6 then
      c = 16
      SET_b_HL(memory:read_8b(pc + 1))
      log("SET " .. toHex(pc + 1) .. ", (HL)")
      pc = pc + 2
    elseif memory:read_8b(pc) == 0x87 then
      c = 8
      RES_b_A(memory:read_8b(pc + 1))
      log("RES " .. toHex(pc + 1) .. ", A")
      pc = pc + 2
    elseif memory:read_8b(pc) == 0x80 then
      c = 8
      RES_b_B(memory:read_8b(pc + 1))
      log("RES " .. toHex(pc + 1) .. ", B")
      pc = pc + 2
    elseif memory:read_8b(pc) == 0x81 then
      c = 8
      RES_b_C(memory:read_8b(pc + 1))
      log("RES " .. toHex(pc + 1) .. ", C")
      pc = pc + 2
    elseif memory:read_8b(pc) == 0x82 then
      c = 8
      RES_b_D(memory:read_8b(pc + 1))
      log("RES " .. toHex(pc + 1) .. ", D")
      pc = pc + 2
    elseif memory:read_8b(pc) == 0x83 then
      c = 8
      RES_b_E(memory:read_8b(pc + 1))
      log("RES " .. toHex(pc + 1) .. ", E")
      pc = pc + 2
    elseif memory:read_8b(pc) == 0x84 then
      c = 8
      RES_b_H(memory:read_8b(pc + 1))
      log("RES " .. toHex(pc + 1) .. ", H")
      pc = pc + 2
    elseif memory:read_8b(pc) == 0x85 then
      c = 8
      RES_b_L(memory:read_8b(pc + 1))
      log("RES " .. toHex(pc + 1) .. ", L")
      pc = pc + 2
    elseif memory:read_8b(pc) == 0x86 then
      c = 8
      RES_b_HL(memory:read_8b(pc + 1))
      log("RES " .. toHex(pc + 1) .. ", (HL)")
      pc = pc + 2
    else
      log(toHex(memory:read_8b(pc)) .. " is not an opcode with the prefix CB!")
    end

    pc = pc + 2
  else
    log(toHex(memory:read_8b(pc - 1)) .. " is not handled")
    pc = pc + 1
  end
end


function on.charIn (char)
  stop = debugger.mode == 2 
  if bitwiseAnd_8b(memory:read_8b(0xff00), 0x20) > 0 then -- Must have selected button keys
    buttons.aButton:check()
    buttons.bButton:check()
  end

  if debugger.mode == 0 or debugger.mode == 2 then
    debugger:setCommand(debugger.command .. char)
  end
end

function on.arrowUp ()
  stop = debugger.mode == 2
  if bitwiseAnd_8b(memory:read_8b(0xff00), 0x10) > 0 then -- Must have selected directional keys
    buttons.upButton:press()
  end
end

function on.arrowDown ()
  stop = debugger.mode == 2 
  if bitwiseAnd_8b(memory:read_8b(0xff00), 0x10) > 0 then -- Must have selected directional keys
    buttons.downButton:press()
  end
end

function on.arrowLeft ()
  stop = debugger.mode == 2 
  if bitwiseAnd_8b(memory:read_8b(0xff00), 0x10) > 0 then -- Must have selected directional keys
    buttons.leftButton:press()
  end
end

function on.arrowRight ()
  stop = debugger.mode == 2 
  if bitwiseAnd_8b(memory:read_8b(0xff00), 0x10) > 0 then -- Must have selected directional keys
    buttons.rightButton:press()
  end
end

function on.enterKey ()
  if debugger.mode == 0 or debugger.mode == 2 then
    debugger:check()
  end
end

function on.backspaceKey () 
  debugger:setCommand(string.sub(debugger.command, 1, string.len(debugger.command) - 1))
end

speed = 0

function main ()
  start = timer.getMilliSecCounter()
  old = timer.getMilliSecCounter()
  wait = 0
  dispatch = false
  refresh = false

  speed = 0
  while wait < 10 * speedScaler do
    speed = speed + 1
    old = timer.getMilliSecCounter()

    if stop == false and halt == false then
      if refresh == false then
        platform.window:invalidate()
        refresh = true
      end

      if c <= 0 then
        dispatcher()
      end

      -- Increment Divider Register
      div = memory:read_8b(0xff04)
      div = div + ((16 * (timer.getMilliSecCounter() - old)) * speedScaler) -- Rounded from 16.384
      if div > 0xff then
        div = 0
      end
      memory:writeNoCheck_8b(0xff04, div)

      if bitwiseAnd_8b(memory:read_8b(0xff07), 0x04) == 1 then -- Check if timer is enabled
        -- Set timerSpeed
        bit1 = bitwiseAnd_8b(memory:read_8b(0xff07), 0x01)
        bit2 = bitwiseAnd_8b(memory:read_8b(0xff07), 0x02)
        if bit1 == 0 and bit2 == 0 then
          timerSpeed = 4
        elseif bit1 == 0 and bit2 == 1 then
          timerSpeed = 262
        elseif bit1 == 1 and bit2 == 0 then
          timerSpeed = 65
        elseif bit1 == 1 and bit2 == 1 then
          timerSpeed = 16
        end
        timerSpeed = timerSpeed * speedScaler

        -- Increment Timer Register
        rTimer = memory:read_8b(0xff05)
        rTimer = rTimer + (timerSpeed * (timer.getMilliSecCounter() - old))
        memory:write_8b(0xff05, rTimer)
      end
    end

    for i = 1, #interruptArray do
      if interruptArray[i]:run() then
        break -- High priority interrupt ran so no others should run
      end
    end

    for i = 1, #buttons do
      buttons[i]:release()
    end

    c = c - (timerSpeed * (timer.getMilliSecCounter() - old))
    if debugger.step == true and c >= 0 then
      stop = true 
      debugger.step = false
    end

    wait = (timer.getMilliSecCounter() - start) * speedScaler -- Slow down speed
  end
end

time = 0

function on.timer ()
  time = timer.getMilliSecCounter()

  if debugger.mode == 1 or (debugger.mode == 2 and stop == false) then
    main()
  else
    platform.window:invalidate()
  end

  time = timer.getMilliSecCounter() - time
end

timer.start(0.01)


function on.paint (gc)
  if debugger.mode == 1 then
    gc:drawString("A: " .. toHex(registers[1]) .. " B: " .. toHex(registers[2]) .. " C: " .. toHex(registers[3]) .. " D: " .. toHex(registers[4]), 2, 10)
    gc:drawString("E: " .. toHex(registers[5]) .. " F: " .. toHex(registers[8]) .. " H: " .. toHex(registers[6]) .. " L: " .. toHex(registers[7]) .. " SP: " .. toHex(registers[9]), 2, 30)
    gc:drawString(toHex(pc) .. " " .. command, 2, 50)
    gc:drawString("Timer Loop: " .. time .. " ms", 2, 70)
    gc:drawString("Timer Speed: " .. speed, 2, 90)
    gc:drawString("Time Until Next Command: " .. c, 2, 110)
    gc:drawString("DIV Register: " .. toHex(memory:read_8b(0xff04)), 2, 130)
    gc:drawString("Timer Register: " .. toHex(memory:read_8b(0xff05)), 2, 150)
  end

	if debugger.mode == 0 then
		testDraw(gc)
	  gc:setColorRGB(0, 0, 0) -- Reset color to black
	end

  debugger:renderText(gc, command)
  drawMessage(gc)
end


